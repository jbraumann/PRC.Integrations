# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import prc_pb2 as prc__pb2

GRPC_GENERATED_VERSION = '1.65.5'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in prc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class ParametricRobotControlServiceStub(object):
    """ParametricRobotControlService provides an interface for simulating/controlling supported robots through GRPC.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetupRobot = channel.unary_unary(
                '/ParametricRobotControlService/SetupRobot',
                request_serializer=prc__pb2.SetupRobotRequest.SerializeToString,
                response_deserializer=prc__pb2.SetupRobotReply.FromString,
                _registered_method=True)
        self.AddRobotTask = channel.unary_unary(
                '/ParametricRobotControlService/AddRobotTask',
                request_serializer=prc__pb2.AddRobotTaskRequest.SerializeToString,
                response_deserializer=prc__pb2.AddRobotTaskReply.FromString,
                _registered_method=True)
        self.SubscribeRobotFeedback = channel.unary_stream(
                '/ParametricRobotControlService/SubscribeRobotFeedback',
                request_serializer=prc__pb2.SubscribeRobotFeedbackRequest.SerializeToString,
                response_deserializer=prc__pb2.RobotFeedback.FromString,
                _registered_method=True)
        self.GetSimulatedRobotState = channel.unary_unary(
                '/ParametricRobotControlService/GetSimulatedRobotState',
                request_serializer=prc__pb2.GetSimulatedRobotStateRequest.SerializeToString,
                response_deserializer=prc__pb2.RobotState.FromString,
                _registered_method=True)
        self.UpdateVariable = channel.unary_unary(
                '/ParametricRobotControlService/UpdateVariable',
                request_serializer=prc__pb2.UpdateVariableRequest.SerializeToString,
                response_deserializer=prc__pb2.UpdateVariableReply.FromString,
                _registered_method=True)
        self.SendPing = channel.unary_unary(
                '/ParametricRobotControlService/SendPing',
                request_serializer=prc__pb2.Ping.SerializeToString,
                response_deserializer=prc__pb2.Ping.FromString,
                _registered_method=True)


class ParametricRobotControlServiceServicer(object):
    """ParametricRobotControlService provides an interface for simulating/controlling supported robots through GRPC.
    """

    def SetupRobot(self, request, context):
        """Step 1: Setup the simulation/control environemt.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRobotTask(self, request, context):
        """Step 2: Define a task to be processed or simulated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeRobotFeedback(self, request, context):
        """Step 3: Subscribe to the feedback coming from the simulation/control environment..
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSimulatedRobotState(self, request, context):
        """Step 4: Request a simulation update, to be either provided directly or written to the feedback stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateVariable(self, request, context):
        """Optional: Can update a variable. Always returns a list of all variables of all connected devices.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPing(self, request, context):
        """Optional: Ping the controller.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ParametricRobotControlServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetupRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.SetupRobot,
                    request_deserializer=prc__pb2.SetupRobotRequest.FromString,
                    response_serializer=prc__pb2.SetupRobotReply.SerializeToString,
            ),
            'AddRobotTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRobotTask,
                    request_deserializer=prc__pb2.AddRobotTaskRequest.FromString,
                    response_serializer=prc__pb2.AddRobotTaskReply.SerializeToString,
            ),
            'SubscribeRobotFeedback': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeRobotFeedback,
                    request_deserializer=prc__pb2.SubscribeRobotFeedbackRequest.FromString,
                    response_serializer=prc__pb2.RobotFeedback.SerializeToString,
            ),
            'GetSimulatedRobotState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSimulatedRobotState,
                    request_deserializer=prc__pb2.GetSimulatedRobotStateRequest.FromString,
                    response_serializer=prc__pb2.RobotState.SerializeToString,
            ),
            'UpdateVariable': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateVariable,
                    request_deserializer=prc__pb2.UpdateVariableRequest.FromString,
                    response_serializer=prc__pb2.UpdateVariableReply.SerializeToString,
            ),
            'SendPing': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPing,
                    request_deserializer=prc__pb2.Ping.FromString,
                    response_serializer=prc__pb2.Ping.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ParametricRobotControlService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ParametricRobotControlService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ParametricRobotControlService(object):
    """ParametricRobotControlService provides an interface for simulating/controlling supported robots through GRPC.
    """

    @staticmethod
    def SetupRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ParametricRobotControlService/SetupRobot',
            prc__pb2.SetupRobotRequest.SerializeToString,
            prc__pb2.SetupRobotReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddRobotTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ParametricRobotControlService/AddRobotTask',
            prc__pb2.AddRobotTaskRequest.SerializeToString,
            prc__pb2.AddRobotTaskReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeRobotFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ParametricRobotControlService/SubscribeRobotFeedback',
            prc__pb2.SubscribeRobotFeedbackRequest.SerializeToString,
            prc__pb2.RobotFeedback.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSimulatedRobotState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ParametricRobotControlService/GetSimulatedRobotState',
            prc__pb2.GetSimulatedRobotStateRequest.SerializeToString,
            prc__pb2.RobotState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateVariable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ParametricRobotControlService/UpdateVariable',
            prc__pb2.UpdateVariableRequest.SerializeToString,
            prc__pb2.UpdateVariableReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendPing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ParametricRobotControlService/SendPing',
            prc__pb2.Ping.SerializeToString,
            prc__pb2.Ping.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
