// source: prc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Action', null, global);
goog.exportSymbol('proto.Action.ActionNodeCase', null, global);
goog.exportSymbol('proto.AddRobotTaskReply', null, global);
goog.exportSymbol('proto.AddRobotTaskRequest', null, global);
goog.exportSymbol('proto.AxisMotion', null, global);
goog.exportSymbol('proto.AxisName', null, global);
goog.exportSymbol('proto.Base', null, global);
goog.exportSymbol('proto.CartesianPosition', null, global);
goog.exportSymbol('proto.CartesianPosition.FrameCase', null, global);
goog.exportSymbol('proto.CartesianReference', null, global);
goog.exportSymbol('proto.CartesianTarget', null, global);
goog.exportSymbol('proto.CircularMotion', null, global);
goog.exportSymbol('proto.CoordinateSystem', null, global);
goog.exportSymbol('proto.CustomRobot', null, global);
goog.exportSymbol('proto.End', null, global);
goog.exportSymbol('proto.Euler', null, global);
goog.exportSymbol('proto.ExternalAxis', null, global);
goog.exportSymbol('proto.ExternalAxisType', null, global);
goog.exportSymbol('proto.Flow', null, global);
goog.exportSymbol('proto.Flow.FlowNodeCase', null, global);
goog.exportSymbol('proto.FrameType', null, global);
goog.exportSymbol('proto.GetSimulatedRobotStateRequest', null, global);
goog.exportSymbol('proto.Heartbeat', null, global);
goog.exportSymbol('proto.Hold', null, global);
goog.exportSymbol('proto.IfElse', null, global);
goog.exportSymbol('proto.InsertCode', null, global);
goog.exportSymbol('proto.Int4', null, global);
goog.exportSymbol('proto.JointTarget', null, global);
goog.exportSymbol('proto.LINMotion', null, global);
goog.exportSymbol('proto.Matrix4x4', null, global);
goog.exportSymbol('proto.Mesh', null, global);
goog.exportSymbol('proto.MetaData', null, global);
goog.exportSymbol('proto.MotionCommand', null, global);
goog.exportSymbol('proto.MotionCommand.CommandCase', null, global);
goog.exportSymbol('proto.MotionGroup', null, global);
goog.exportSymbol('proto.MotionGroupType', null, global);
goog.exportSymbol('proto.PTPMotion', null, global);
goog.exportSymbol('proto.Ping', null, global);
goog.exportSymbol('proto.PolyMesh', null, global);
goog.exportSymbol('proto.Robot', null, global);
goog.exportSymbol('proto.Robot.RobotDataCase', null, global);
goog.exportSymbol('proto.RobotFeedback', null, global);
goog.exportSymbol('proto.RobotFeedback.DataPackageCase', null, global);
goog.exportSymbol('proto.RobotState', null, global);
goog.exportSymbol('proto.RobotStatus', null, global);
goog.exportSymbol('proto.SetVariable', null, global);
goog.exportSymbol('proto.Settings', null, global);
goog.exportSymbol('proto.SetupRobotReply', null, global);
goog.exportSymbol('proto.SetupRobotRequest', null, global);
goog.exportSymbol('proto.SimulationResult', null, global);
goog.exportSymbol('proto.SimulationResultUnit', null, global);
goog.exportSymbol('proto.SubscribeRobotFeedbackRequest', null, global);
goog.exportSymbol('proto.Task', null, global);
goog.exportSymbol('proto.TaskPayload', null, global);
goog.exportSymbol('proto.TaskPayload.PayloadCase', null, global);
goog.exportSymbol('proto.TaskType', null, global);
goog.exportSymbol('proto.Tool', null, global);
goog.exportSymbol('proto.TransformationArray', null, global);
goog.exportSymbol('proto.UpdateVariableReply', null, global);
goog.exportSymbol('proto.UpdateVariableRequest', null, global);
goog.exportSymbol('proto.Variable', null, global);
goog.exportSymbol('proto.Variable.VariableValueCase', null, global);
goog.exportSymbol('proto.VariableArray', null, global);
goog.exportSymbol('proto.Vector3', null, global);
goog.exportSymbol('proto.WaitForVariable', null, global);
goog.exportSymbol('proto.While', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Action.oneofGroups_);
};
goog.inherits(proto.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Action.displayName = 'proto.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetVariable.displayName = 'proto.SetVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WaitForVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WaitForVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WaitForVariable.displayName = 'proto.WaitForVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Hold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Hold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Hold.displayName = 'proto.Hold';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Ping.displayName = 'proto.Ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InsertCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InsertCode.repeatedFields_, null);
};
goog.inherits(proto.InsertCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InsertCode.displayName = 'proto.InsertCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SimulationResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SimulationResult.repeatedFields_, null);
};
goog.inherits(proto.SimulationResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SimulationResult.displayName = 'proto.SimulationResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SimulationResultUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SimulationResultUnit.repeatedFields_, null);
};
goog.inherits(proto.SimulationResultUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SimulationResultUnit.displayName = 'proto.SimulationResultUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RobotState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RobotState.repeatedFields_, null);
};
goog.inherits(proto.RobotState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RobotState.displayName = 'proto.RobotState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Task.repeatedFields_, null);
};
goog.inherits(proto.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Task.displayName = 'proto.Task';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.TaskPayload.oneofGroups_);
};
goog.inherits(proto.TaskPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TaskPayload.displayName = 'proto.TaskPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Flow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Flow.oneofGroups_);
};
goog.inherits(proto.Flow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Flow.displayName = 'proto.Flow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IfElse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IfElse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IfElse.displayName = 'proto.IfElse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.While = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.While, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.While.displayName = 'proto.While';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.End = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.End, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.End.displayName = 'proto.End';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MotionCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.MotionCommand.oneofGroups_);
};
goog.inherits(proto.MotionCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MotionCommand.displayName = 'proto.MotionCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MotionGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MotionGroup.repeatedFields_, null);
};
goog.inherits(proto.MotionGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MotionGroup.displayName = 'proto.MotionGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AxisMotion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AxisMotion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AxisMotion.displayName = 'proto.AxisMotion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CircularMotion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CircularMotion.repeatedFields_, null);
};
goog.inherits(proto.CircularMotion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CircularMotion.displayName = 'proto.CircularMotion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LINMotion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LINMotion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LINMotion.displayName = 'proto.LINMotion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PTPMotion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PTPMotion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PTPMotion.displayName = 'proto.PTPMotion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Matrix4x4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Matrix4x4, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Matrix4x4.displayName = 'proto.Matrix4x4';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesianPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.CartesianPosition.oneofGroups_);
};
goog.inherits(proto.CartesianPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesianPosition.displayName = 'proto.CartesianPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesianTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CartesianTarget.repeatedFields_, null);
};
goog.inherits(proto.CartesianTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesianTarget.displayName = 'proto.CartesianTarget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JointTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.JointTarget.repeatedFields_, null);
};
goog.inherits(proto.JointTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JointTarget.displayName = 'proto.JointTarget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vector3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Vector3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Vector3.displayName = 'proto.Vector3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Int4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Int4, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Int4.displayName = 'proto.Int4';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Euler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Euler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Euler.displayName = 'proto.Euler';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoordinateSystem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoordinateSystem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CoordinateSystem.displayName = 'proto.CoordinateSystem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Variable.oneofGroups_);
};
goog.inherits(proto.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Variable.displayName = 'proto.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Heartbeat.displayName = 'proto.Heartbeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Settings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Settings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Settings.displayName = 'proto.Settings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mesh = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Mesh.repeatedFields_, null);
};
goog.inherits(proto.Mesh, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Mesh.displayName = 'proto.Mesh';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PolyMesh = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PolyMesh.repeatedFields_, null);
};
goog.inherits(proto.PolyMesh, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PolyMesh.displayName = 'proto.PolyMesh';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransformationArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TransformationArray.repeatedFields_, null);
};
goog.inherits(proto.TransformationArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransformationArray.displayName = 'proto.TransformationArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VariableArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VariableArray.repeatedFields_, null);
};
goog.inherits(proto.VariableArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VariableArray.displayName = 'proto.VariableArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MetaData.displayName = 'proto.MetaData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubscribeRobotFeedbackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubscribeRobotFeedbackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SubscribeRobotFeedbackRequest.displayName = 'proto.SubscribeRobotFeedbackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RobotFeedback = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RobotFeedback.oneofGroups_);
};
goog.inherits(proto.RobotFeedback, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RobotFeedback.displayName = 'proto.RobotFeedback';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetSimulatedRobotStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetSimulatedRobotStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetSimulatedRobotStateRequest.displayName = 'proto.GetSimulatedRobotStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddRobotTaskRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddRobotTaskRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddRobotTaskRequest.displayName = 'proto.AddRobotTaskRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddRobotTaskReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddRobotTaskReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddRobotTaskReply.displayName = 'proto.AddRobotTaskReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateVariableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateVariableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UpdateVariableRequest.displayName = 'proto.UpdateVariableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateVariableReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UpdateVariableReply.repeatedFields_, null);
};
goog.inherits(proto.UpdateVariableReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UpdateVariableReply.displayName = 'proto.UpdateVariableReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetupRobotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetupRobotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetupRobotRequest.displayName = 'proto.SetupRobotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetupRobotReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetupRobotReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetupRobotReply.displayName = 'proto.SetupRobotReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Robot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Robot.repeatedFields_, proto.Robot.oneofGroups_);
};
goog.inherits(proto.Robot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Robot.displayName = 'proto.Robot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tool.displayName = 'proto.Tool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Base = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Base, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Base.displayName = 'proto.Base';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CustomRobot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CustomRobot.repeatedFields_, null);
};
goog.inherits(proto.CustomRobot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CustomRobot.displayName = 'proto.CustomRobot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExternalAxis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ExternalAxis.repeatedFields_, null);
};
goog.inherits(proto.ExternalAxis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExternalAxis.displayName = 'proto.ExternalAxis';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Action.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.Action.ActionNodeCase = {
  ACTION_NODE_NOT_SET: 0,
  SET_VARIABLE_ACTION: 1,
  WAIT_FOR_VARIABLE_ACTION: 2,
  HOLD_ACTION: 3,
  PING_ACTION: 4,
  INSERT_CODE_ACTION: 5
};

/**
 * @return {proto.Action.ActionNodeCase}
 */
proto.Action.prototype.getActionNodeCase = function() {
  return /** @type {proto.Action.ActionNodeCase} */(jspb.Message.computeOneofCase(this, proto.Action.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    setVariableAction: (f = msg.getSetVariableAction()) && proto.SetVariable.toObject(includeInstance, f),
    waitForVariableAction: (f = msg.getWaitForVariableAction()) && proto.WaitForVariable.toObject(includeInstance, f),
    holdAction: (f = msg.getHoldAction()) && proto.Hold.toObject(includeInstance, f),
    pingAction: (f = msg.getPingAction()) && proto.Ping.toObject(includeInstance, f),
    insertCodeAction: (f = msg.getInsertCodeAction()) && proto.InsertCode.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Action}
 */
proto.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Action;
  return proto.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Action}
 */
proto.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SetVariable;
      reader.readMessage(value,proto.SetVariable.deserializeBinaryFromReader);
      msg.setSetVariableAction(value);
      break;
    case 2:
      var value = new proto.WaitForVariable;
      reader.readMessage(value,proto.WaitForVariable.deserializeBinaryFromReader);
      msg.setWaitForVariableAction(value);
      break;
    case 3:
      var value = new proto.Hold;
      reader.readMessage(value,proto.Hold.deserializeBinaryFromReader);
      msg.setHoldAction(value);
      break;
    case 4:
      var value = new proto.Ping;
      reader.readMessage(value,proto.Ping.deserializeBinaryFromReader);
      msg.setPingAction(value);
      break;
    case 5:
      var value = new proto.InsertCode;
      reader.readMessage(value,proto.InsertCode.deserializeBinaryFromReader);
      msg.setInsertCodeAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetVariableAction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SetVariable.serializeBinaryToWriter
    );
  }
  f = message.getWaitForVariableAction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WaitForVariable.serializeBinaryToWriter
    );
  }
  f = message.getHoldAction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Hold.serializeBinaryToWriter
    );
  }
  f = message.getPingAction();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Ping.serializeBinaryToWriter
    );
  }
  f = message.getInsertCodeAction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.InsertCode.serializeBinaryToWriter
    );
  }
};


/**
 * optional SetVariable set_variable_action = 1;
 * @return {?proto.SetVariable}
 */
proto.Action.prototype.getSetVariableAction = function() {
  return /** @type{?proto.SetVariable} */ (
    jspb.Message.getWrapperField(this, proto.SetVariable, 1));
};


/**
 * @param {?proto.SetVariable|undefined} value
 * @return {!proto.Action} returns this
*/
proto.Action.prototype.setSetVariableAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Action} returns this
 */
proto.Action.prototype.clearSetVariableAction = function() {
  return this.setSetVariableAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Action.prototype.hasSetVariableAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WaitForVariable wait_for_variable_action = 2;
 * @return {?proto.WaitForVariable}
 */
proto.Action.prototype.getWaitForVariableAction = function() {
  return /** @type{?proto.WaitForVariable} */ (
    jspb.Message.getWrapperField(this, proto.WaitForVariable, 2));
};


/**
 * @param {?proto.WaitForVariable|undefined} value
 * @return {!proto.Action} returns this
*/
proto.Action.prototype.setWaitForVariableAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Action} returns this
 */
proto.Action.prototype.clearWaitForVariableAction = function() {
  return this.setWaitForVariableAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Action.prototype.hasWaitForVariableAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Hold hold_action = 3;
 * @return {?proto.Hold}
 */
proto.Action.prototype.getHoldAction = function() {
  return /** @type{?proto.Hold} */ (
    jspb.Message.getWrapperField(this, proto.Hold, 3));
};


/**
 * @param {?proto.Hold|undefined} value
 * @return {!proto.Action} returns this
*/
proto.Action.prototype.setHoldAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Action} returns this
 */
proto.Action.prototype.clearHoldAction = function() {
  return this.setHoldAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Action.prototype.hasHoldAction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Ping ping_action = 4;
 * @return {?proto.Ping}
 */
proto.Action.prototype.getPingAction = function() {
  return /** @type{?proto.Ping} */ (
    jspb.Message.getWrapperField(this, proto.Ping, 4));
};


/**
 * @param {?proto.Ping|undefined} value
 * @return {!proto.Action} returns this
*/
proto.Action.prototype.setPingAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Action} returns this
 */
proto.Action.prototype.clearPingAction = function() {
  return this.setPingAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Action.prototype.hasPingAction = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InsertCode insert_code_action = 5;
 * @return {?proto.InsertCode}
 */
proto.Action.prototype.getInsertCodeAction = function() {
  return /** @type{?proto.InsertCode} */ (
    jspb.Message.getWrapperField(this, proto.InsertCode, 5));
};


/**
 * @param {?proto.InsertCode|undefined} value
 * @return {!proto.Action} returns this
*/
proto.Action.prototype.setInsertCodeAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Action} returns this
 */
proto.Action.prototype.clearInsertCodeAction = function() {
  return this.setInsertCodeAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Action.prototype.hasInsertCodeAction = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.SetVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    newState: (f = msg.getNewState()) && proto.Variable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetVariable}
 */
proto.SetVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetVariable;
  return proto.SetVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetVariable}
 */
proto.SetVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Variable;
      reader.readMessage(value,proto.Variable.deserializeBinaryFromReader);
      msg.setNewState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable new_state = 1;
 * @return {?proto.Variable}
 */
proto.SetVariable.prototype.getNewState = function() {
  return /** @type{?proto.Variable} */ (
    jspb.Message.getWrapperField(this, proto.Variable, 1));
};


/**
 * @param {?proto.Variable|undefined} value
 * @return {!proto.SetVariable} returns this
*/
proto.SetVariable.prototype.setNewState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SetVariable} returns this
 */
proto.SetVariable.prototype.clearNewState = function() {
  return this.setNewState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetVariable.prototype.hasNewState = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WaitForVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.WaitForVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WaitForVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WaitForVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    awaitState: (f = msg.getAwaitState()) && proto.Variable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WaitForVariable}
 */
proto.WaitForVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WaitForVariable;
  return proto.WaitForVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WaitForVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WaitForVariable}
 */
proto.WaitForVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Variable;
      reader.readMessage(value,proto.Variable.deserializeBinaryFromReader);
      msg.setAwaitState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WaitForVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WaitForVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WaitForVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WaitForVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAwaitState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable await_state = 1;
 * @return {?proto.Variable}
 */
proto.WaitForVariable.prototype.getAwaitState = function() {
  return /** @type{?proto.Variable} */ (
    jspb.Message.getWrapperField(this, proto.Variable, 1));
};


/**
 * @param {?proto.Variable|undefined} value
 * @return {!proto.WaitForVariable} returns this
*/
proto.WaitForVariable.prototype.setAwaitState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WaitForVariable} returns this
 */
proto.WaitForVariable.prototype.clearAwaitState = function() {
  return this.setAwaitState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WaitForVariable.prototype.hasAwaitState = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Hold.prototype.toObject = function(opt_includeInstance) {
  return proto.Hold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Hold} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hold.toObject = function(includeInstance, msg) {
  var f, obj = {
    holdMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Hold}
 */
proto.Hold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Hold;
  return proto.Hold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Hold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Hold}
 */
proto.Hold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHoldMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Hold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Hold.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Hold} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hold.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHoldMs();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float hold_ms = 1;
 * @return {number}
 */
proto.Hold.prototype.getHoldMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Hold} returns this
 */
proto.Hold.prototype.setHoldMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timeMs: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ping}
 */
proto.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ping;
  return proto.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ping}
 */
proto.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimeMs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string payload = 1;
 * @return {string}
 */
proto.Ping.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Ping} returns this
 */
proto.Ping.prototype.setPayload = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 time_ms = 2;
 * @return {number}
 */
proto.Ping.prototype.getTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Ping} returns this
 */
proto.Ping.prototype.setTimeMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InsertCode.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InsertCode.prototype.toObject = function(opt_includeInstance) {
  return proto.InsertCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InsertCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InsertCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    codeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InsertCode}
 */
proto.InsertCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InsertCode;
  return proto.InsertCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InsertCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InsertCode}
 */
proto.InsertCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InsertCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InsertCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InsertCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InsertCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string code = 1;
 * @return {!Array<string>}
 */
proto.InsertCode.prototype.getCodeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.InsertCode} returns this
 */
proto.InsertCode.prototype.setCodeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.InsertCode} returns this
 */
proto.InsertCode.prototype.addCode = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.InsertCode} returns this
 */
proto.InsertCode.prototype.clearCodeList = function() {
  return this.setCodeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SimulationResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SimulationResult.prototype.toObject = function(opt_includeInstance) {
  return proto.SimulationResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SimulationResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SimulationResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    simulationResultsList: jspb.Message.toObjectList(msg.getSimulationResultsList(),
    proto.SimulationResultUnit.toObject, includeInstance),
    isValid: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    time: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    code: jspb.Message.getFieldWithDefault(msg, 4, ""),
    data: (f = msg.getData()) && proto.MetaData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SimulationResult}
 */
proto.SimulationResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SimulationResult;
  return proto.SimulationResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SimulationResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SimulationResult}
 */
proto.SimulationResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SimulationResultUnit;
      reader.readMessage(value,proto.SimulationResultUnit.deserializeBinaryFromReader);
      msg.addSimulationResults(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsValid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 5:
      var value = new proto.MetaData;
      reader.readMessage(value,proto.MetaData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SimulationResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SimulationResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SimulationResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SimulationResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimulationResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SimulationResultUnit.serializeBinaryToWriter
    );
  }
  f = message.getIsValid();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.MetaData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SimulationResultUnit simulation_results = 1;
 * @return {!Array<!proto.SimulationResultUnit>}
 */
proto.SimulationResult.prototype.getSimulationResultsList = function() {
  return /** @type{!Array<!proto.SimulationResultUnit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SimulationResultUnit, 1));
};


/**
 * @param {!Array<!proto.SimulationResultUnit>} value
 * @return {!proto.SimulationResult} returns this
*/
proto.SimulationResult.prototype.setSimulationResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SimulationResultUnit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SimulationResultUnit}
 */
proto.SimulationResult.prototype.addSimulationResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SimulationResultUnit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SimulationResult} returns this
 */
proto.SimulationResult.prototype.clearSimulationResultsList = function() {
  return this.setSimulationResultsList([]);
};


/**
 * optional bool is_valid = 2;
 * @return {boolean}
 */
proto.SimulationResult.prototype.getIsValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SimulationResult} returns this
 */
proto.SimulationResult.prototype.setIsValid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional float time = 3;
 * @return {number}
 */
proto.SimulationResult.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SimulationResult} returns this
 */
proto.SimulationResult.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string code = 4;
 * @return {string}
 */
proto.SimulationResult.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.SimulationResult} returns this
 */
proto.SimulationResult.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional MetaData data = 5;
 * @return {?proto.MetaData}
 */
proto.SimulationResult.prototype.getData = function() {
  return /** @type{?proto.MetaData} */ (
    jspb.Message.getWrapperField(this, proto.MetaData, 5));
};


/**
 * @param {?proto.MetaData|undefined} value
 * @return {!proto.SimulationResult} returns this
*/
proto.SimulationResult.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SimulationResult} returns this
 */
proto.SimulationResult.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SimulationResult.prototype.hasData = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SimulationResultUnit.repeatedFields_ = [1,4,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SimulationResultUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.SimulationResultUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SimulationResultUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SimulationResultUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    axisValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    position: (f = msg.getPosition()) && proto.Matrix4x4.toObject(includeInstance, f),
    time: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    collisionList: (f = jspb.Message.getRepeatedBooleanField(msg, 4)) == null ? undefined : f,
    singularityList: (f = jspb.Message.getRepeatedBooleanField(msg, 5)) == null ? undefined : f,
    outofreachList: (f = jspb.Message.getRepeatedBooleanField(msg, 6)) == null ? undefined : f,
    externalAxisValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    externalAxisOutofreachList: (f = jspb.Message.getRepeatedBooleanField(msg, 8)) == null ? undefined : f,
    interpolationFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    id: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SimulationResultUnit}
 */
proto.SimulationResultUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SimulationResultUnit;
  return proto.SimulationResultUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SimulationResultUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SimulationResultUnit}
 */
proto.SimulationResultUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setAxisValuesList(value);
      break;
    case 2:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setCollisionList(value);
      break;
    case 5:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setSingularityList(value);
      break;
    case 6:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setOutofreachList(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setExternalAxisValuesList(value);
      break;
    case 8:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setExternalAxisOutofreachList(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInterpolationFactor(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SimulationResultUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SimulationResultUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SimulationResultUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SimulationResultUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAxisValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCollisionList();
  if (f.length > 0) {
    writer.writePackedBool(
      4,
      f
    );
  }
  f = message.getSingularityList();
  if (f.length > 0) {
    writer.writePackedBool(
      5,
      f
    );
  }
  f = message.getOutofreachList();
  if (f.length > 0) {
    writer.writePackedBool(
      6,
      f
    );
  }
  f = message.getExternalAxisValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      7,
      f
    );
  }
  f = message.getExternalAxisOutofreachList();
  if (f.length > 0) {
    writer.writePackedBool(
      8,
      f
    );
  }
  f = message.getInterpolationFactor();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * repeated float axis_values = 1;
 * @return {!Array<number>}
 */
proto.SimulationResultUnit.prototype.getAxisValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.setAxisValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.addAxisValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.clearAxisValuesList = function() {
  return this.setAxisValuesList([]);
};


/**
 * optional Matrix4x4 position = 2;
 * @return {?proto.Matrix4x4}
 */
proto.SimulationResultUnit.prototype.getPosition = function() {
  return /** @type{?proto.Matrix4x4} */ (
    jspb.Message.getWrapperField(this, proto.Matrix4x4, 2));
};


/**
 * @param {?proto.Matrix4x4|undefined} value
 * @return {!proto.SimulationResultUnit} returns this
*/
proto.SimulationResultUnit.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SimulationResultUnit.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float time = 3;
 * @return {number}
 */
proto.SimulationResultUnit.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * repeated bool collision = 4;
 * @return {!Array<boolean>}
 */
proto.SimulationResultUnit.prototype.getCollisionList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 4));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.setCollisionList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.addCollision = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.clearCollisionList = function() {
  return this.setCollisionList([]);
};


/**
 * repeated bool singularity = 5;
 * @return {!Array<boolean>}
 */
proto.SimulationResultUnit.prototype.getSingularityList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 5));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.setSingularityList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.addSingularity = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.clearSingularityList = function() {
  return this.setSingularityList([]);
};


/**
 * repeated bool outofreach = 6;
 * @return {!Array<boolean>}
 */
proto.SimulationResultUnit.prototype.getOutofreachList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 6));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.setOutofreachList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.addOutofreach = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.clearOutofreachList = function() {
  return this.setOutofreachList([]);
};


/**
 * repeated float external_axis_values = 7;
 * @return {!Array<number>}
 */
proto.SimulationResultUnit.prototype.getExternalAxisValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.setExternalAxisValuesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.addExternalAxisValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.clearExternalAxisValuesList = function() {
  return this.setExternalAxisValuesList([]);
};


/**
 * repeated bool external_axis_outofreach = 8;
 * @return {!Array<boolean>}
 */
proto.SimulationResultUnit.prototype.getExternalAxisOutofreachList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 8));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.setExternalAxisOutofreachList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.addExternalAxisOutofreach = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.clearExternalAxisOutofreachList = function() {
  return this.setExternalAxisOutofreachList([]);
};


/**
 * optional float interpolation_factor = 9;
 * @return {number}
 */
proto.SimulationResultUnit.prototype.getInterpolationFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.setInterpolationFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional string id = 10;
 * @return {string}
 */
proto.SimulationResultUnit.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.SimulationResultUnit} returns this
 */
proto.SimulationResultUnit.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RobotState.repeatedFields_ = [2,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RobotState.prototype.toObject = function(opt_includeInstance) {
  return proto.RobotState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RobotState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotState.toObject = function(includeInstance, msg) {
  var f, obj = {
    axisPosition: (f = msg.getAxisPosition()) && proto.JointTarget.toObject(includeInstance, f),
    robotTransformationsList: jspb.Message.toObjectList(msg.getRobotTransformationsList(),
    proto.TransformationArray.toObject, includeInstance),
    toolpathIndex: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    toolId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    toolFrame: (f = msg.getToolFrame()) && proto.Matrix4x4.toObject(includeInstance, f),
    rootFrame: (f = msg.getRootFrame()) && proto.Matrix4x4.toObject(includeInstance, f),
    flangeFrame: (f = msg.getFlangeFrame()) && proto.Matrix4x4.toObject(includeInstance, f),
    axisAlarmList: (f = jspb.Message.getRepeatedBooleanField(msg, 8)) == null ? undefined : f,
    externalAxisAlarmList: (f = jspb.Message.getRepeatedBooleanField(msg, 9)) == null ? undefined : f,
    variablesMap: (f = msg.getVariablesMap()) ? f.toObject(includeInstance, proto.VariableArray.toObject) : [],
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : [],
    connectionFeedback: jspb.Message.getFieldWithDefault(msg, 12, ""),
    taskId: jspb.Message.getFieldWithDefault(msg, 13, ""),
    commandId: jspb.Message.getFieldWithDefault(msg, 14, ""),
    robotId: jspb.Message.getFieldWithDefault(msg, 15, ""),
    status: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RobotState}
 */
proto.RobotState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RobotState;
  return proto.RobotState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RobotState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RobotState}
 */
proto.RobotState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.JointTarget;
      reader.readMessage(value,proto.JointTarget.deserializeBinaryFromReader);
      msg.setAxisPosition(value);
      break;
    case 2:
      var value = new proto.TransformationArray;
      reader.readMessage(value,proto.TransformationArray.deserializeBinaryFromReader);
      msg.addRobotTransformations(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setToolpathIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToolId(value);
      break;
    case 5:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.setToolFrame(value);
      break;
    case 6:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.setRootFrame(value);
      break;
    case 7:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.setFlangeFrame(value);
      break;
    case 8:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setAxisAlarmList(value);
      break;
    case 9:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setExternalAxisAlarmList(value);
      break;
    case 10:
      var value = msg.getVariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.VariableArray.deserializeBinaryFromReader, "", new proto.VariableArray());
         });
      break;
    case 11:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionFeedback(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommandId(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setRobotId(value);
      break;
    case 16:
      var value = /** @type {!proto.RobotStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RobotState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RobotState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RobotState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAxisPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.JointTarget.serializeBinaryToWriter
    );
  }
  f = message.getRobotTransformationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TransformationArray.serializeBinaryToWriter
    );
  }
  f = message.getToolpathIndex();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getToolId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getToolFrame();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
  f = message.getRootFrame();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
  f = message.getFlangeFrame();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
  f = message.getAxisAlarmList();
  if (f.length > 0) {
    writer.writePackedBool(
      8,
      f
    );
  }
  f = message.getExternalAxisAlarmList();
  if (f.length > 0) {
    writer.writePackedBool(
      9,
      f
    );
  }
  f = message.getVariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.VariableArray.serializeBinaryToWriter);
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getConnectionFeedback();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTaskId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getCommandId();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getRobotId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
};


/**
 * optional JointTarget axis_position = 1;
 * @return {?proto.JointTarget}
 */
proto.RobotState.prototype.getAxisPosition = function() {
  return /** @type{?proto.JointTarget} */ (
    jspb.Message.getWrapperField(this, proto.JointTarget, 1));
};


/**
 * @param {?proto.JointTarget|undefined} value
 * @return {!proto.RobotState} returns this
*/
proto.RobotState.prototype.setAxisPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.clearAxisPosition = function() {
  return this.setAxisPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotState.prototype.hasAxisPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TransformationArray robot_transformations = 2;
 * @return {!Array<!proto.TransformationArray>}
 */
proto.RobotState.prototype.getRobotTransformationsList = function() {
  return /** @type{!Array<!proto.TransformationArray>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TransformationArray, 2));
};


/**
 * @param {!Array<!proto.TransformationArray>} value
 * @return {!proto.RobotState} returns this
*/
proto.RobotState.prototype.setRobotTransformationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TransformationArray=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TransformationArray}
 */
proto.RobotState.prototype.addRobotTransformations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TransformationArray, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.clearRobotTransformationsList = function() {
  return this.setRobotTransformationsList([]);
};


/**
 * optional float toolpath_index = 3;
 * @return {number}
 */
proto.RobotState.prototype.getToolpathIndex = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.setToolpathIndex = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string tool_id = 4;
 * @return {string}
 */
proto.RobotState.prototype.getToolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.setToolId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Matrix4x4 tool_frame = 5;
 * @return {?proto.Matrix4x4}
 */
proto.RobotState.prototype.getToolFrame = function() {
  return /** @type{?proto.Matrix4x4} */ (
    jspb.Message.getWrapperField(this, proto.Matrix4x4, 5));
};


/**
 * @param {?proto.Matrix4x4|undefined} value
 * @return {!proto.RobotState} returns this
*/
proto.RobotState.prototype.setToolFrame = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.clearToolFrame = function() {
  return this.setToolFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotState.prototype.hasToolFrame = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Matrix4x4 root_frame = 6;
 * @return {?proto.Matrix4x4}
 */
proto.RobotState.prototype.getRootFrame = function() {
  return /** @type{?proto.Matrix4x4} */ (
    jspb.Message.getWrapperField(this, proto.Matrix4x4, 6));
};


/**
 * @param {?proto.Matrix4x4|undefined} value
 * @return {!proto.RobotState} returns this
*/
proto.RobotState.prototype.setRootFrame = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.clearRootFrame = function() {
  return this.setRootFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotState.prototype.hasRootFrame = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Matrix4x4 flange_frame = 7;
 * @return {?proto.Matrix4x4}
 */
proto.RobotState.prototype.getFlangeFrame = function() {
  return /** @type{?proto.Matrix4x4} */ (
    jspb.Message.getWrapperField(this, proto.Matrix4x4, 7));
};


/**
 * @param {?proto.Matrix4x4|undefined} value
 * @return {!proto.RobotState} returns this
*/
proto.RobotState.prototype.setFlangeFrame = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.clearFlangeFrame = function() {
  return this.setFlangeFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotState.prototype.hasFlangeFrame = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated bool axis_alarm = 8;
 * @return {!Array<boolean>}
 */
proto.RobotState.prototype.getAxisAlarmList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 8));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.setAxisAlarmList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.addAxisAlarm = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.clearAxisAlarmList = function() {
  return this.setAxisAlarmList([]);
};


/**
 * repeated bool external_axis_alarm = 9;
 * @return {!Array<boolean>}
 */
proto.RobotState.prototype.getExternalAxisAlarmList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 9));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.setExternalAxisAlarmList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.addExternalAxisAlarm = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.clearExternalAxisAlarmList = function() {
  return this.setExternalAxisAlarmList([]);
};


/**
 * map<string, VariableArray> variables = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.VariableArray>}
 */
proto.RobotState.prototype.getVariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.VariableArray>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      proto.VariableArray));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.clearVariablesMap = function() {
  this.getVariablesMap().clear();
  return this;};


/**
 * map<string, string> data = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.RobotState.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;};


/**
 * optional string connection_feedback = 12;
 * @return {string}
 */
proto.RobotState.prototype.getConnectionFeedback = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.setConnectionFeedback = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string task_id = 13;
 * @return {string}
 */
proto.RobotState.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.setTaskId = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string command_id = 14;
 * @return {string}
 */
proto.RobotState.prototype.getCommandId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.setCommandId = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string robot_id = 15;
 * @return {string}
 */
proto.RobotState.prototype.getRobotId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.setRobotId = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional RobotStatus status = 16;
 * @return {!proto.RobotStatus}
 */
proto.RobotState.prototype.getStatus = function() {
  return /** @type {!proto.RobotStatus} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {!proto.RobotStatus} value
 * @return {!proto.RobotState} returns this
 */
proto.RobotState.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Task.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    payloadList: jspb.Message.toObjectList(msg.getPayloadList(),
    proto.TaskPayload.toObject, includeInstance),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    data: (f = msg.getData()) && proto.MetaData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Task}
 */
proto.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Task;
  return proto.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Task}
 */
proto.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TaskPayload;
      reader.readMessage(value,proto.TaskPayload.deserializeBinaryFromReader);
      msg.addPayload(value);
      break;
    case 2:
      var value = /** @type {!proto.TaskType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.MetaData;
      reader.readMessage(value,proto.MetaData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayloadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TaskPayload.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.MetaData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TaskPayload payload = 1;
 * @return {!Array<!proto.TaskPayload>}
 */
proto.Task.prototype.getPayloadList = function() {
  return /** @type{!Array<!proto.TaskPayload>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TaskPayload, 1));
};


/**
 * @param {!Array<!proto.TaskPayload>} value
 * @return {!proto.Task} returns this
*/
proto.Task.prototype.setPayloadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TaskPayload=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TaskPayload}
 */
proto.Task.prototype.addPayload = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TaskPayload, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearPayloadList = function() {
  return this.setPayloadList([]);
};


/**
 * optional TaskType type = 2;
 * @return {!proto.TaskType}
 */
proto.Task.prototype.getType = function() {
  return /** @type {!proto.TaskType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.TaskType} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.Task.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional MetaData data = 4;
 * @return {?proto.MetaData}
 */
proto.Task.prototype.getData = function() {
  return /** @type{?proto.MetaData} */ (
    jspb.Message.getWrapperField(this, proto.MetaData, 4));
};


/**
 * @param {?proto.MetaData|undefined} value
 * @return {!proto.Task} returns this
*/
proto.Task.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Task} returns this
 */
proto.Task.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Task.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.TaskPayload.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.TaskPayload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  FLOW_TASK: 1,
  MOTION_GROUP_TASK: 2,
  ACTION_TASK: 3
};

/**
 * @return {proto.TaskPayload.PayloadCase}
 */
proto.TaskPayload.prototype.getPayloadCase = function() {
  return /** @type {proto.TaskPayload.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.TaskPayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    flowTask: (f = msg.getFlowTask()) && proto.Flow.toObject(includeInstance, f),
    motionGroupTask: (f = msg.getMotionGroupTask()) && proto.MotionGroup.toObject(includeInstance, f),
    actionTask: (f = msg.getActionTask()) && proto.Action.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskPayload}
 */
proto.TaskPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskPayload;
  return proto.TaskPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskPayload}
 */
proto.TaskPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Flow;
      reader.readMessage(value,proto.Flow.deserializeBinaryFromReader);
      msg.setFlowTask(value);
      break;
    case 2:
      var value = new proto.MotionGroup;
      reader.readMessage(value,proto.MotionGroup.deserializeBinaryFromReader);
      msg.setMotionGroupTask(value);
      break;
    case 3:
      var value = new proto.Action;
      reader.readMessage(value,proto.Action.deserializeBinaryFromReader);
      msg.setActionTask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TaskPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TaskPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlowTask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Flow.serializeBinaryToWriter
    );
  }
  f = message.getMotionGroupTask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MotionGroup.serializeBinaryToWriter
    );
  }
  f = message.getActionTask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Action.serializeBinaryToWriter
    );
  }
};


/**
 * optional Flow flow_task = 1;
 * @return {?proto.Flow}
 */
proto.TaskPayload.prototype.getFlowTask = function() {
  return /** @type{?proto.Flow} */ (
    jspb.Message.getWrapperField(this, proto.Flow, 1));
};


/**
 * @param {?proto.Flow|undefined} value
 * @return {!proto.TaskPayload} returns this
*/
proto.TaskPayload.prototype.setFlowTask = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.TaskPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TaskPayload} returns this
 */
proto.TaskPayload.prototype.clearFlowTask = function() {
  return this.setFlowTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TaskPayload.prototype.hasFlowTask = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MotionGroup motion_group_task = 2;
 * @return {?proto.MotionGroup}
 */
proto.TaskPayload.prototype.getMotionGroupTask = function() {
  return /** @type{?proto.MotionGroup} */ (
    jspb.Message.getWrapperField(this, proto.MotionGroup, 2));
};


/**
 * @param {?proto.MotionGroup|undefined} value
 * @return {!proto.TaskPayload} returns this
*/
proto.TaskPayload.prototype.setMotionGroupTask = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.TaskPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TaskPayload} returns this
 */
proto.TaskPayload.prototype.clearMotionGroupTask = function() {
  return this.setMotionGroupTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TaskPayload.prototype.hasMotionGroupTask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Action action_task = 3;
 * @return {?proto.Action}
 */
proto.TaskPayload.prototype.getActionTask = function() {
  return /** @type{?proto.Action} */ (
    jspb.Message.getWrapperField(this, proto.Action, 3));
};


/**
 * @param {?proto.Action|undefined} value
 * @return {!proto.TaskPayload} returns this
*/
proto.TaskPayload.prototype.setActionTask = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.TaskPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TaskPayload} returns this
 */
proto.TaskPayload.prototype.clearActionTask = function() {
  return this.setActionTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TaskPayload.prototype.hasActionTask = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Flow.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.Flow.FlowNodeCase = {
  FLOW_NODE_NOT_SET: 0,
  IF_ELSE_FLOW: 2,
  WHILE_FLOW: 3,
  END_FLOW: 4
};

/**
 * @return {proto.Flow.FlowNodeCase}
 */
proto.Flow.prototype.getFlowNodeCase = function() {
  return /** @type {proto.Flow.FlowNodeCase} */(jspb.Message.computeOneofCase(this, proto.Flow.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Flow.prototype.toObject = function(opt_includeInstance) {
  return proto.Flow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Flow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Flow.toObject = function(includeInstance, msg) {
  var f, obj = {
    ifElseFlow: (f = msg.getIfElseFlow()) && proto.IfElse.toObject(includeInstance, f),
    whileFlow: (f = msg.getWhileFlow()) && proto.While.toObject(includeInstance, f),
    endFlow: (f = msg.getEndFlow()) && proto.End.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Flow}
 */
proto.Flow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Flow;
  return proto.Flow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Flow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Flow}
 */
proto.Flow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.IfElse;
      reader.readMessage(value,proto.IfElse.deserializeBinaryFromReader);
      msg.setIfElseFlow(value);
      break;
    case 3:
      var value = new proto.While;
      reader.readMessage(value,proto.While.deserializeBinaryFromReader);
      msg.setWhileFlow(value);
      break;
    case 4:
      var value = new proto.End;
      reader.readMessage(value,proto.End.deserializeBinaryFromReader);
      msg.setEndFlow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Flow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Flow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Flow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Flow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIfElseFlow();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IfElse.serializeBinaryToWriter
    );
  }
  f = message.getWhileFlow();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.While.serializeBinaryToWriter
    );
  }
  f = message.getEndFlow();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.End.serializeBinaryToWriter
    );
  }
};


/**
 * optional IfElse if_else_flow = 2;
 * @return {?proto.IfElse}
 */
proto.Flow.prototype.getIfElseFlow = function() {
  return /** @type{?proto.IfElse} */ (
    jspb.Message.getWrapperField(this, proto.IfElse, 2));
};


/**
 * @param {?proto.IfElse|undefined} value
 * @return {!proto.Flow} returns this
*/
proto.Flow.prototype.setIfElseFlow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Flow.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Flow} returns this
 */
proto.Flow.prototype.clearIfElseFlow = function() {
  return this.setIfElseFlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Flow.prototype.hasIfElseFlow = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional While while_flow = 3;
 * @return {?proto.While}
 */
proto.Flow.prototype.getWhileFlow = function() {
  return /** @type{?proto.While} */ (
    jspb.Message.getWrapperField(this, proto.While, 3));
};


/**
 * @param {?proto.While|undefined} value
 * @return {!proto.Flow} returns this
*/
proto.Flow.prototype.setWhileFlow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Flow.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Flow} returns this
 */
proto.Flow.prototype.clearWhileFlow = function() {
  return this.setWhileFlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Flow.prototype.hasWhileFlow = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional End end_flow = 4;
 * @return {?proto.End}
 */
proto.Flow.prototype.getEndFlow = function() {
  return /** @type{?proto.End} */ (
    jspb.Message.getWrapperField(this, proto.End, 4));
};


/**
 * @param {?proto.End|undefined} value
 * @return {!proto.Flow} returns this
*/
proto.Flow.prototype.setEndFlow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Flow.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Flow} returns this
 */
proto.Flow.prototype.clearEndFlow = function() {
  return this.setEndFlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Flow.prototype.hasEndFlow = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IfElse.prototype.toObject = function(opt_includeInstance) {
  return proto.IfElse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IfElse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IfElse.toObject = function(includeInstance, msg) {
  var f, obj = {
    condition: (f = msg.getCondition()) && proto.Variable.toObject(includeInstance, f),
    ifTrue: (f = msg.getIfTrue()) && proto.Task.toObject(includeInstance, f),
    ifFalse: (f = msg.getIfFalse()) && proto.Task.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IfElse}
 */
proto.IfElse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IfElse;
  return proto.IfElse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IfElse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IfElse}
 */
proto.IfElse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Variable;
      reader.readMessage(value,proto.Variable.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 2:
      var value = new proto.Task;
      reader.readMessage(value,proto.Task.deserializeBinaryFromReader);
      msg.setIfTrue(value);
      break;
    case 3:
      var value = new proto.Task;
      reader.readMessage(value,proto.Task.deserializeBinaryFromReader);
      msg.setIfFalse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IfElse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IfElse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IfElse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IfElse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Variable.serializeBinaryToWriter
    );
  }
  f = message.getIfTrue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Task.serializeBinaryToWriter
    );
  }
  f = message.getIfFalse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Task.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable condition = 1;
 * @return {?proto.Variable}
 */
proto.IfElse.prototype.getCondition = function() {
  return /** @type{?proto.Variable} */ (
    jspb.Message.getWrapperField(this, proto.Variable, 1));
};


/**
 * @param {?proto.Variable|undefined} value
 * @return {!proto.IfElse} returns this
*/
proto.IfElse.prototype.setCondition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IfElse} returns this
 */
proto.IfElse.prototype.clearCondition = function() {
  return this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IfElse.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Task if_true = 2;
 * @return {?proto.Task}
 */
proto.IfElse.prototype.getIfTrue = function() {
  return /** @type{?proto.Task} */ (
    jspb.Message.getWrapperField(this, proto.Task, 2));
};


/**
 * @param {?proto.Task|undefined} value
 * @return {!proto.IfElse} returns this
*/
proto.IfElse.prototype.setIfTrue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IfElse} returns this
 */
proto.IfElse.prototype.clearIfTrue = function() {
  return this.setIfTrue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IfElse.prototype.hasIfTrue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Task if_false = 3;
 * @return {?proto.Task}
 */
proto.IfElse.prototype.getIfFalse = function() {
  return /** @type{?proto.Task} */ (
    jspb.Message.getWrapperField(this, proto.Task, 3));
};


/**
 * @param {?proto.Task|undefined} value
 * @return {!proto.IfElse} returns this
*/
proto.IfElse.prototype.setIfFalse = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IfElse} returns this
 */
proto.IfElse.prototype.clearIfFalse = function() {
  return this.setIfFalse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IfElse.prototype.hasIfFalse = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.While.prototype.toObject = function(opt_includeInstance) {
  return proto.While.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.While} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.While.toObject = function(includeInstance, msg) {
  var f, obj = {
    condition: (f = msg.getCondition()) && proto.Variable.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.Task.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.While}
 */
proto.While.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.While;
  return proto.While.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.While} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.While}
 */
proto.While.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Variable;
      reader.readMessage(value,proto.Variable.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 2:
      var value = new proto.Task;
      reader.readMessage(value,proto.Task.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.While.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.While.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.While} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.While.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Variable.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Task.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable condition = 1;
 * @return {?proto.Variable}
 */
proto.While.prototype.getCondition = function() {
  return /** @type{?proto.Variable} */ (
    jspb.Message.getWrapperField(this, proto.Variable, 1));
};


/**
 * @param {?proto.Variable|undefined} value
 * @return {!proto.While} returns this
*/
proto.While.prototype.setCondition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.While} returns this
 */
proto.While.prototype.clearCondition = function() {
  return this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.While.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Task body = 2;
 * @return {?proto.Task}
 */
proto.While.prototype.getBody = function() {
  return /** @type{?proto.Task} */ (
    jspb.Message.getWrapperField(this, proto.Task, 2));
};


/**
 * @param {?proto.Task|undefined} value
 * @return {!proto.While} returns this
*/
proto.While.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.While} returns this
 */
proto.While.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.While.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.End.prototype.toObject = function(opt_includeInstance) {
  return proto.End.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.End} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.End.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.End}
 */
proto.End.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.End;
  return proto.End.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.End} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.End}
 */
proto.End.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.End.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.End.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.End} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.End.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.MotionCommand.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.MotionCommand.CommandCase = {
  COMMAND_NOT_SET: 0,
  AXIS_MOTION: 1,
  CIRCULAR_MOTION: 2,
  PTP_MOTION: 3,
  LIN_MOTION: 4
};

/**
 * @return {proto.MotionCommand.CommandCase}
 */
proto.MotionCommand.prototype.getCommandCase = function() {
  return /** @type {proto.MotionCommand.CommandCase} */(jspb.Message.computeOneofCase(this, proto.MotionCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MotionCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.MotionCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MotionCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotionCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    axisMotion: (f = msg.getAxisMotion()) && proto.AxisMotion.toObject(includeInstance, f),
    circularMotion: (f = msg.getCircularMotion()) && proto.CircularMotion.toObject(includeInstance, f),
    ptpMotion: (f = msg.getPtpMotion()) && proto.PTPMotion.toObject(includeInstance, f),
    linMotion: (f = msg.getLinMotion()) && proto.LINMotion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MotionCommand}
 */
proto.MotionCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MotionCommand;
  return proto.MotionCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MotionCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MotionCommand}
 */
proto.MotionCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AxisMotion;
      reader.readMessage(value,proto.AxisMotion.deserializeBinaryFromReader);
      msg.setAxisMotion(value);
      break;
    case 2:
      var value = new proto.CircularMotion;
      reader.readMessage(value,proto.CircularMotion.deserializeBinaryFromReader);
      msg.setCircularMotion(value);
      break;
    case 3:
      var value = new proto.PTPMotion;
      reader.readMessage(value,proto.PTPMotion.deserializeBinaryFromReader);
      msg.setPtpMotion(value);
      break;
    case 4:
      var value = new proto.LINMotion;
      reader.readMessage(value,proto.LINMotion.deserializeBinaryFromReader);
      msg.setLinMotion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MotionCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MotionCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MotionCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotionCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAxisMotion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AxisMotion.serializeBinaryToWriter
    );
  }
  f = message.getCircularMotion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CircularMotion.serializeBinaryToWriter
    );
  }
  f = message.getPtpMotion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.PTPMotion.serializeBinaryToWriter
    );
  }
  f = message.getLinMotion();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.LINMotion.serializeBinaryToWriter
    );
  }
};


/**
 * optional AxisMotion axis_motion = 1;
 * @return {?proto.AxisMotion}
 */
proto.MotionCommand.prototype.getAxisMotion = function() {
  return /** @type{?proto.AxisMotion} */ (
    jspb.Message.getWrapperField(this, proto.AxisMotion, 1));
};


/**
 * @param {?proto.AxisMotion|undefined} value
 * @return {!proto.MotionCommand} returns this
*/
proto.MotionCommand.prototype.setAxisMotion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.MotionCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MotionCommand} returns this
 */
proto.MotionCommand.prototype.clearAxisMotion = function() {
  return this.setAxisMotion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MotionCommand.prototype.hasAxisMotion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CircularMotion circular_motion = 2;
 * @return {?proto.CircularMotion}
 */
proto.MotionCommand.prototype.getCircularMotion = function() {
  return /** @type{?proto.CircularMotion} */ (
    jspb.Message.getWrapperField(this, proto.CircularMotion, 2));
};


/**
 * @param {?proto.CircularMotion|undefined} value
 * @return {!proto.MotionCommand} returns this
*/
proto.MotionCommand.prototype.setCircularMotion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.MotionCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MotionCommand} returns this
 */
proto.MotionCommand.prototype.clearCircularMotion = function() {
  return this.setCircularMotion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MotionCommand.prototype.hasCircularMotion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PTPMotion ptp_motion = 3;
 * @return {?proto.PTPMotion}
 */
proto.MotionCommand.prototype.getPtpMotion = function() {
  return /** @type{?proto.PTPMotion} */ (
    jspb.Message.getWrapperField(this, proto.PTPMotion, 3));
};


/**
 * @param {?proto.PTPMotion|undefined} value
 * @return {!proto.MotionCommand} returns this
*/
proto.MotionCommand.prototype.setPtpMotion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.MotionCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MotionCommand} returns this
 */
proto.MotionCommand.prototype.clearPtpMotion = function() {
  return this.setPtpMotion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MotionCommand.prototype.hasPtpMotion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LINMotion lin_motion = 4;
 * @return {?proto.LINMotion}
 */
proto.MotionCommand.prototype.getLinMotion = function() {
  return /** @type{?proto.LINMotion} */ (
    jspb.Message.getWrapperField(this, proto.LINMotion, 4));
};


/**
 * @param {?proto.LINMotion|undefined} value
 * @return {!proto.MotionCommand} returns this
*/
proto.MotionCommand.prototype.setLinMotion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.MotionCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MotionCommand} returns this
 */
proto.MotionCommand.prototype.clearLinMotion = function() {
  return this.setLinMotion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MotionCommand.prototype.hasLinMotion = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MotionGroup.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MotionGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.MotionGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MotionGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotionGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    motionGroupType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.MotionCommand.toObject, includeInstance),
    interpolation: jspb.Message.getFieldWithDefault(msg, 3, ""),
    toolId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    robotBase: (f = msg.getRobotBase()) && proto.Base.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.MetaData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MotionGroup}
 */
proto.MotionGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MotionGroup;
  return proto.MotionGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MotionGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MotionGroup}
 */
proto.MotionGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MotionGroupType} */ (reader.readEnum());
      msg.setMotionGroupType(value);
      break;
    case 2:
      var value = new proto.MotionCommand;
      reader.readMessage(value,proto.MotionCommand.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInterpolation(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToolId(value);
      break;
    case 5:
      var value = new proto.Base;
      reader.readMessage(value,proto.Base.deserializeBinaryFromReader);
      msg.setRobotBase(value);
      break;
    case 6:
      var value = new proto.MetaData;
      reader.readMessage(value,proto.MetaData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MotionGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MotionGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MotionGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotionGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMotionGroupType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MotionCommand.serializeBinaryToWriter
    );
  }
  f = message.getInterpolation();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToolId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRobotBase();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Base.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.MetaData.serializeBinaryToWriter
    );
  }
};


/**
 * optional MotionGroupType motion_group_type = 1;
 * @return {!proto.MotionGroupType}
 */
proto.MotionGroup.prototype.getMotionGroupType = function() {
  return /** @type {!proto.MotionGroupType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.MotionGroupType} value
 * @return {!proto.MotionGroup} returns this
 */
proto.MotionGroup.prototype.setMotionGroupType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated MotionCommand commands = 2;
 * @return {!Array<!proto.MotionCommand>}
 */
proto.MotionGroup.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.MotionCommand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MotionCommand, 2));
};


/**
 * @param {!Array<!proto.MotionCommand>} value
 * @return {!proto.MotionGroup} returns this
*/
proto.MotionGroup.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MotionCommand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MotionCommand}
 */
proto.MotionGroup.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MotionCommand, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MotionGroup} returns this
 */
proto.MotionGroup.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};


/**
 * optional string interpolation = 3;
 * @return {string}
 */
proto.MotionGroup.prototype.getInterpolation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MotionGroup} returns this
 */
proto.MotionGroup.prototype.setInterpolation = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tool_id = 4;
 * @return {string}
 */
proto.MotionGroup.prototype.getToolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MotionGroup} returns this
 */
proto.MotionGroup.prototype.setToolId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Base robot_base = 5;
 * @return {?proto.Base}
 */
proto.MotionGroup.prototype.getRobotBase = function() {
  return /** @type{?proto.Base} */ (
    jspb.Message.getWrapperField(this, proto.Base, 5));
};


/**
 * @param {?proto.Base|undefined} value
 * @return {!proto.MotionGroup} returns this
*/
proto.MotionGroup.prototype.setRobotBase = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MotionGroup} returns this
 */
proto.MotionGroup.prototype.clearRobotBase = function() {
  return this.setRobotBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MotionGroup.prototype.hasRobotBase = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MetaData data = 6;
 * @return {?proto.MetaData}
 */
proto.MotionGroup.prototype.getData = function() {
  return /** @type{?proto.MetaData} */ (
    jspb.Message.getWrapperField(this, proto.MetaData, 6));
};


/**
 * @param {?proto.MetaData|undefined} value
 * @return {!proto.MotionGroup} returns this
*/
proto.MotionGroup.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MotionGroup} returns this
 */
proto.MotionGroup.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MotionGroup.prototype.hasData = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AxisMotion.prototype.toObject = function(opt_includeInstance) {
  return proto.AxisMotion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AxisMotion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AxisMotion.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.MetaData.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.JointTarget.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AxisMotion}
 */
proto.AxisMotion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AxisMotion;
  return proto.AxisMotion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AxisMotion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AxisMotion}
 */
proto.AxisMotion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MetaData;
      reader.readMessage(value,proto.MetaData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new proto.JointTarget;
      reader.readMessage(value,proto.JointTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AxisMotion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AxisMotion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AxisMotion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AxisMotion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MetaData.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.JointTarget.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaData data = 1;
 * @return {?proto.MetaData}
 */
proto.AxisMotion.prototype.getData = function() {
  return /** @type{?proto.MetaData} */ (
    jspb.Message.getWrapperField(this, proto.MetaData, 1));
};


/**
 * @param {?proto.MetaData|undefined} value
 * @return {!proto.AxisMotion} returns this
*/
proto.AxisMotion.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AxisMotion} returns this
 */
proto.AxisMotion.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AxisMotion.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JointTarget target = 2;
 * @return {?proto.JointTarget}
 */
proto.AxisMotion.prototype.getTarget = function() {
  return /** @type{?proto.JointTarget} */ (
    jspb.Message.getWrapperField(this, proto.JointTarget, 2));
};


/**
 * @param {?proto.JointTarget|undefined} value
 * @return {!proto.AxisMotion} returns this
*/
proto.AxisMotion.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AxisMotion} returns this
 */
proto.AxisMotion.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AxisMotion.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CircularMotion.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CircularMotion.prototype.toObject = function(opt_includeInstance) {
  return proto.CircularMotion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CircularMotion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CircularMotion.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.MetaData.toObject(includeInstance, f),
    targetsList: jspb.Message.toObjectList(msg.getTargetsList(),
    proto.CartesianTarget.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CircularMotion}
 */
proto.CircularMotion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CircularMotion;
  return proto.CircularMotion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CircularMotion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CircularMotion}
 */
proto.CircularMotion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MetaData;
      reader.readMessage(value,proto.MetaData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new proto.CartesianTarget;
      reader.readMessage(value,proto.CartesianTarget.deserializeBinaryFromReader);
      msg.addTargets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CircularMotion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CircularMotion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CircularMotion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CircularMotion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MetaData.serializeBinaryToWriter
    );
  }
  f = message.getTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.CartesianTarget.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaData data = 1;
 * @return {?proto.MetaData}
 */
proto.CircularMotion.prototype.getData = function() {
  return /** @type{?proto.MetaData} */ (
    jspb.Message.getWrapperField(this, proto.MetaData, 1));
};


/**
 * @param {?proto.MetaData|undefined} value
 * @return {!proto.CircularMotion} returns this
*/
proto.CircularMotion.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CircularMotion} returns this
 */
proto.CircularMotion.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CircularMotion.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CartesianTarget targets = 2;
 * @return {!Array<!proto.CartesianTarget>}
 */
proto.CircularMotion.prototype.getTargetsList = function() {
  return /** @type{!Array<!proto.CartesianTarget>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CartesianTarget, 2));
};


/**
 * @param {!Array<!proto.CartesianTarget>} value
 * @return {!proto.CircularMotion} returns this
*/
proto.CircularMotion.prototype.setTargetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.CartesianTarget=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CartesianTarget}
 */
proto.CircularMotion.prototype.addTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.CartesianTarget, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CircularMotion} returns this
 */
proto.CircularMotion.prototype.clearTargetsList = function() {
  return this.setTargetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LINMotion.prototype.toObject = function(opt_includeInstance) {
  return proto.LINMotion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LINMotion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LINMotion.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.MetaData.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.CartesianTarget.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LINMotion}
 */
proto.LINMotion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LINMotion;
  return proto.LINMotion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LINMotion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LINMotion}
 */
proto.LINMotion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MetaData;
      reader.readMessage(value,proto.MetaData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new proto.CartesianTarget;
      reader.readMessage(value,proto.CartesianTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LINMotion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LINMotion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LINMotion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LINMotion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MetaData.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CartesianTarget.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaData data = 1;
 * @return {?proto.MetaData}
 */
proto.LINMotion.prototype.getData = function() {
  return /** @type{?proto.MetaData} */ (
    jspb.Message.getWrapperField(this, proto.MetaData, 1));
};


/**
 * @param {?proto.MetaData|undefined} value
 * @return {!proto.LINMotion} returns this
*/
proto.LINMotion.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LINMotion} returns this
 */
proto.LINMotion.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LINMotion.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CartesianTarget target = 2;
 * @return {?proto.CartesianTarget}
 */
proto.LINMotion.prototype.getTarget = function() {
  return /** @type{?proto.CartesianTarget} */ (
    jspb.Message.getWrapperField(this, proto.CartesianTarget, 2));
};


/**
 * @param {?proto.CartesianTarget|undefined} value
 * @return {!proto.LINMotion} returns this
*/
proto.LINMotion.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LINMotion} returns this
 */
proto.LINMotion.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LINMotion.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PTPMotion.prototype.toObject = function(opt_includeInstance) {
  return proto.PTPMotion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PTPMotion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PTPMotion.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.MetaData.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.CartesianTarget.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PTPMotion}
 */
proto.PTPMotion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PTPMotion;
  return proto.PTPMotion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PTPMotion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PTPMotion}
 */
proto.PTPMotion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MetaData;
      reader.readMessage(value,proto.MetaData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new proto.CartesianTarget;
      reader.readMessage(value,proto.CartesianTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PTPMotion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PTPMotion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PTPMotion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PTPMotion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MetaData.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CartesianTarget.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaData data = 1;
 * @return {?proto.MetaData}
 */
proto.PTPMotion.prototype.getData = function() {
  return /** @type{?proto.MetaData} */ (
    jspb.Message.getWrapperField(this, proto.MetaData, 1));
};


/**
 * @param {?proto.MetaData|undefined} value
 * @return {!proto.PTPMotion} returns this
*/
proto.PTPMotion.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PTPMotion} returns this
 */
proto.PTPMotion.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PTPMotion.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CartesianTarget target = 2;
 * @return {?proto.CartesianTarget}
 */
proto.PTPMotion.prototype.getTarget = function() {
  return /** @type{?proto.CartesianTarget} */ (
    jspb.Message.getWrapperField(this, proto.CartesianTarget, 2));
};


/**
 * @param {?proto.CartesianTarget|undefined} value
 * @return {!proto.PTPMotion} returns this
*/
proto.PTPMotion.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PTPMotion} returns this
 */
proto.PTPMotion.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PTPMotion.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Matrix4x4.prototype.toObject = function(opt_includeInstance) {
  return proto.Matrix4x4.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Matrix4x4} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Matrix4x4.toObject = function(includeInstance, msg) {
  var f, obj = {
    m11: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    m12: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    m13: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    m14: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    m21: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    m22: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    m23: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    m24: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    m31: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    m32: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    m33: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    m34: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    m41: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    m42: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    m43: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    m44: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Matrix4x4}
 */
proto.Matrix4x4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Matrix4x4;
  return proto.Matrix4x4.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Matrix4x4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Matrix4x4}
 */
proto.Matrix4x4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM11(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM12(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM13(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM14(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM21(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM22(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM23(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM24(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM31(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM32(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM33(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM34(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM41(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM42(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM43(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM44(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Matrix4x4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Matrix4x4.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Matrix4x4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Matrix4x4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getM11();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getM12();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getM13();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getM14();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getM21();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getM22();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getM23();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getM24();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getM31();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getM32();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getM33();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getM34();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getM41();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getM42();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getM43();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getM44();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
};


/**
 * optional float m11 = 1;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM11 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM11 = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float m12 = 2;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM12 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM12 = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float m13 = 3;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM13 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM13 = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float m14 = 4;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM14 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM14 = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float m21 = 5;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM21 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM21 = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float m22 = 6;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM22 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM22 = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float m23 = 7;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM23 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM23 = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float m24 = 8;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM24 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM24 = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float m31 = 9;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM31 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM31 = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float m32 = 10;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM32 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM32 = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float m33 = 11;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM33 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM33 = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float m34 = 12;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM34 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM34 = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float m41 = 13;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM41 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM41 = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float m42 = 14;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM42 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM42 = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float m43 = 15;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM43 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM43 = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional float m44 = 16;
 * @return {number}
 */
proto.Matrix4x4.prototype.getM44 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Matrix4x4} returns this
 */
proto.Matrix4x4.prototype.setM44 = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.CartesianPosition.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.CartesianPosition.FrameCase = {
  FRAME_NOT_SET: 0,
  MATRIX: 1,
  EULER: 2,
  CS: 3
};

/**
 * @return {proto.CartesianPosition.FrameCase}
 */
proto.CartesianPosition.prototype.getFrameCase = function() {
  return /** @type {proto.CartesianPosition.FrameCase} */(jspb.Message.computeOneofCase(this, proto.CartesianPosition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesianPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesianPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesianPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesianPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    matrix: (f = msg.getMatrix()) && proto.Matrix4x4.toObject(includeInstance, f),
    euler: (f = msg.getEuler()) && proto.Euler.toObject(includeInstance, f),
    cs: (f = msg.getCs()) && proto.CoordinateSystem.toObject(includeInstance, f),
    reference: jspb.Message.getFieldWithDefault(msg, 4, 0),
    parent: (f = msg.getParent()) && proto.Matrix4x4.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesianPosition}
 */
proto.CartesianPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesianPosition;
  return proto.CartesianPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesianPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesianPosition}
 */
proto.CartesianPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.setMatrix(value);
      break;
    case 2:
      var value = new proto.Euler;
      reader.readMessage(value,proto.Euler.deserializeBinaryFromReader);
      msg.setEuler(value);
      break;
    case 3:
      var value = new proto.CoordinateSystem;
      reader.readMessage(value,proto.CoordinateSystem.deserializeBinaryFromReader);
      msg.setCs(value);
      break;
    case 4:
      var value = /** @type {!proto.CartesianReference} */ (reader.readEnum());
      msg.setReference(value);
      break;
    case 5:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesianPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesianPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesianPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesianPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatrix();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
  f = message.getEuler();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Euler.serializeBinaryToWriter
    );
  }
  f = message.getCs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CoordinateSystem.serializeBinaryToWriter
    );
  }
  f = message.getReference();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
};


/**
 * optional Matrix4x4 matrix = 1;
 * @return {?proto.Matrix4x4}
 */
proto.CartesianPosition.prototype.getMatrix = function() {
  return /** @type{?proto.Matrix4x4} */ (
    jspb.Message.getWrapperField(this, proto.Matrix4x4, 1));
};


/**
 * @param {?proto.Matrix4x4|undefined} value
 * @return {!proto.CartesianPosition} returns this
*/
proto.CartesianPosition.prototype.setMatrix = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.CartesianPosition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesianPosition} returns this
 */
proto.CartesianPosition.prototype.clearMatrix = function() {
  return this.setMatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesianPosition.prototype.hasMatrix = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Euler euler = 2;
 * @return {?proto.Euler}
 */
proto.CartesianPosition.prototype.getEuler = function() {
  return /** @type{?proto.Euler} */ (
    jspb.Message.getWrapperField(this, proto.Euler, 2));
};


/**
 * @param {?proto.Euler|undefined} value
 * @return {!proto.CartesianPosition} returns this
*/
proto.CartesianPosition.prototype.setEuler = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.CartesianPosition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesianPosition} returns this
 */
proto.CartesianPosition.prototype.clearEuler = function() {
  return this.setEuler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesianPosition.prototype.hasEuler = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CoordinateSystem cs = 3;
 * @return {?proto.CoordinateSystem}
 */
proto.CartesianPosition.prototype.getCs = function() {
  return /** @type{?proto.CoordinateSystem} */ (
    jspb.Message.getWrapperField(this, proto.CoordinateSystem, 3));
};


/**
 * @param {?proto.CoordinateSystem|undefined} value
 * @return {!proto.CartesianPosition} returns this
*/
proto.CartesianPosition.prototype.setCs = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.CartesianPosition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesianPosition} returns this
 */
proto.CartesianPosition.prototype.clearCs = function() {
  return this.setCs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesianPosition.prototype.hasCs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CartesianReference reference = 4;
 * @return {!proto.CartesianReference}
 */
proto.CartesianPosition.prototype.getReference = function() {
  return /** @type {!proto.CartesianReference} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.CartesianReference} value
 * @return {!proto.CartesianPosition} returns this
 */
proto.CartesianPosition.prototype.setReference = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Matrix4x4 parent = 5;
 * @return {?proto.Matrix4x4}
 */
proto.CartesianPosition.prototype.getParent = function() {
  return /** @type{?proto.Matrix4x4} */ (
    jspb.Message.getWrapperField(this, proto.Matrix4x4, 5));
};


/**
 * @param {?proto.Matrix4x4|undefined} value
 * @return {!proto.CartesianPosition} returns this
*/
proto.CartesianPosition.prototype.setParent = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesianPosition} returns this
 */
proto.CartesianPosition.prototype.clearParent = function() {
  return this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesianPosition.prototype.hasParent = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CartesianTarget.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesianTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesianTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesianTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesianTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.CartesianPosition.toObject(includeInstance, f),
    posture: jspb.Message.getFieldWithDefault(msg, 2, ""),
    speedList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    accelerationList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    externalAxisValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesianTarget}
 */
proto.CartesianTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesianTarget;
  return proto.CartesianTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesianTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesianTarget}
 */
proto.CartesianTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CartesianPosition;
      reader.readMessage(value,proto.CartesianPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosture(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setSpeedList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setAccelerationList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setExternalAxisValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesianTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesianTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesianTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesianTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CartesianPosition.serializeBinaryToWriter
    );
  }
  f = message.getPosture();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpeedList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getAccelerationList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getExternalAxisValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
};


/**
 * optional CartesianPosition position = 1;
 * @return {?proto.CartesianPosition}
 */
proto.CartesianTarget.prototype.getPosition = function() {
  return /** @type{?proto.CartesianPosition} */ (
    jspb.Message.getWrapperField(this, proto.CartesianPosition, 1));
};


/**
 * @param {?proto.CartesianPosition|undefined} value
 * @return {!proto.CartesianTarget} returns this
*/
proto.CartesianTarget.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesianTarget.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string posture = 2;
 * @return {string}
 */
proto.CartesianTarget.prototype.getPosture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.setPosture = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated float speed = 3;
 * @return {!Array<number>}
 */
proto.CartesianTarget.prototype.getSpeedList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.setSpeedList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.addSpeed = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.clearSpeedList = function() {
  return this.setSpeedList([]);
};


/**
 * repeated float acceleration = 4;
 * @return {!Array<number>}
 */
proto.CartesianTarget.prototype.getAccelerationList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.setAccelerationList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.addAcceleration = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.clearAccelerationList = function() {
  return this.setAccelerationList([]);
};


/**
 * repeated float external_axis_values = 5;
 * @return {!Array<number>}
 */
proto.CartesianTarget.prototype.getExternalAxisValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.setExternalAxisValuesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.addExternalAxisValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CartesianTarget} returns this
 */
proto.CartesianTarget.prototype.clearExternalAxisValuesList = function() {
  return this.setExternalAxisValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.JointTarget.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JointTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.JointTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JointTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JointTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    axisValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    speedList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    accelerationList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    externalAxisValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JointTarget}
 */
proto.JointTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JointTarget;
  return proto.JointTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JointTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JointTarget}
 */
proto.JointTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setAxisValuesList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setSpeedList(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setAccelerationList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setExternalAxisValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JointTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JointTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JointTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JointTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAxisValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getSpeedList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getAccelerationList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getExternalAxisValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
};


/**
 * repeated float axis_values = 1;
 * @return {!Array<number>}
 */
proto.JointTarget.prototype.getAxisValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.setAxisValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.addAxisValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.clearAxisValuesList = function() {
  return this.setAxisValuesList([]);
};


/**
 * repeated float speed = 2;
 * @return {!Array<number>}
 */
proto.JointTarget.prototype.getSpeedList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.setSpeedList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.addSpeed = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.clearSpeedList = function() {
  return this.setSpeedList([]);
};


/**
 * repeated float acceleration = 3;
 * @return {!Array<number>}
 */
proto.JointTarget.prototype.getAccelerationList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.setAccelerationList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.addAcceleration = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.clearAccelerationList = function() {
  return this.setAccelerationList([]);
};


/**
 * repeated float external_axis_values = 4;
 * @return {!Array<number>}
 */
proto.JointTarget.prototype.getExternalAxisValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.setExternalAxisValuesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.addExternalAxisValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.JointTarget} returns this
 */
proto.JointTarget.prototype.clearExternalAxisValuesList = function() {
  return this.setExternalAxisValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Vector3.prototype.toObject = function(opt_includeInstance) {
  return proto.Vector3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Vector3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vector3.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vector3}
 */
proto.Vector3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Vector3;
  return proto.Vector3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vector3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vector3}
 */
proto.Vector3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vector3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Vector3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Vector3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vector3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Vector3.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector3} returns this
 */
proto.Vector3.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Vector3.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector3} returns this
 */
proto.Vector3.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.Vector3.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector3} returns this
 */
proto.Vector3.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Int4.prototype.toObject = function(opt_includeInstance) {
  return proto.Int4.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Int4} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int4.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    z: jspb.Message.getFieldWithDefault(msg, 3, 0),
    w: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Int4}
 */
proto.Int4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Int4;
  return proto.Int4.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Int4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Int4}
 */
proto.Int4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setW(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Int4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Int4.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Int4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getW();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.Int4.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Int4} returns this
 */
proto.Int4.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.Int4.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Int4} returns this
 */
proto.Int4.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 z = 3;
 * @return {number}
 */
proto.Int4.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Int4} returns this
 */
proto.Int4.prototype.setZ = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 w = 4;
 * @return {number}
 */
proto.Int4.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Int4} returns this
 */
proto.Int4.prototype.setW = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Euler.prototype.toObject = function(opt_includeInstance) {
  return proto.Euler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Euler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Euler.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    a: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    b: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    c: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Euler}
 */
proto.Euler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Euler;
  return proto.Euler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Euler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Euler}
 */
proto.Euler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setA(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setB(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setC(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Euler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Euler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Euler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Euler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getA();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getB();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getC();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Euler.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Euler} returns this
 */
proto.Euler.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Euler.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Euler} returns this
 */
proto.Euler.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.Euler.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Euler} returns this
 */
proto.Euler.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float a = 4;
 * @return {number}
 */
proto.Euler.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Euler} returns this
 */
proto.Euler.prototype.setA = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float b = 5;
 * @return {number}
 */
proto.Euler.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Euler} returns this
 */
proto.Euler.prototype.setB = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float c = 6;
 * @return {number}
 */
proto.Euler.prototype.getC = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Euler} returns this
 */
proto.Euler.prototype.setC = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoordinateSystem.prototype.toObject = function(opt_includeInstance) {
  return proto.CoordinateSystem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoordinateSystem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoordinateSystem.toObject = function(includeInstance, msg) {
  var f, obj = {
    origin: (f = msg.getOrigin()) && proto.Vector3.toObject(includeInstance, f),
    xAxis: (f = msg.getXAxis()) && proto.Vector3.toObject(includeInstance, f),
    yAxis: (f = msg.getYAxis()) && proto.Vector3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoordinateSystem}
 */
proto.CoordinateSystem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoordinateSystem;
  return proto.CoordinateSystem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoordinateSystem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoordinateSystem}
 */
proto.CoordinateSystem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    case 2:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.setXAxis(value);
      break;
    case 3:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.setYAxis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoordinateSystem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CoordinateSystem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CoordinateSystem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoordinateSystem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getXAxis();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getYAxis();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vector3 origin = 1;
 * @return {?proto.Vector3}
 */
proto.CoordinateSystem.prototype.getOrigin = function() {
  return /** @type{?proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Vector3, 1));
};


/**
 * @param {?proto.Vector3|undefined} value
 * @return {!proto.CoordinateSystem} returns this
*/
proto.CoordinateSystem.prototype.setOrigin = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordinateSystem} returns this
 */
proto.CoordinateSystem.prototype.clearOrigin = function() {
  return this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordinateSystem.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vector3 x_axis = 2;
 * @return {?proto.Vector3}
 */
proto.CoordinateSystem.prototype.getXAxis = function() {
  return /** @type{?proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Vector3, 2));
};


/**
 * @param {?proto.Vector3|undefined} value
 * @return {!proto.CoordinateSystem} returns this
*/
proto.CoordinateSystem.prototype.setXAxis = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordinateSystem} returns this
 */
proto.CoordinateSystem.prototype.clearXAxis = function() {
  return this.setXAxis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordinateSystem.prototype.hasXAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Vector3 y_axis = 3;
 * @return {?proto.Vector3}
 */
proto.CoordinateSystem.prototype.getYAxis = function() {
  return /** @type{?proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Vector3, 3));
};


/**
 * @param {?proto.Vector3|undefined} value
 * @return {!proto.CoordinateSystem} returns this
*/
proto.CoordinateSystem.prototype.setYAxis = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordinateSystem} returns this
 */
proto.CoordinateSystem.prototype.clearYAxis = function() {
  return this.setYAxis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordinateSystem.prototype.hasYAxis = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Variable.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.Variable.VariableValueCase = {
  VARIABLE_VALUE_NOT_SET: 0,
  BOOLEAN: 1,
  SINGLE: 2,
  INTEGER: 3,
  TEXT: 4
};

/**
 * @return {proto.Variable.VariableValueCase}
 */
proto.Variable.prototype.getVariableValueCase = function() {
  return /** @type {proto.Variable.VariableValueCase} */(jspb.Message.computeOneofCase(this, proto.Variable.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_boolean: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    single: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    integer: jspb.Message.getFieldWithDefault(msg, 3, 0),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Variable}
 */
proto.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Variable;
  return proto.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Variable}
 */
proto.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolean(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSingle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInteger(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bool boolean = 1;
 * @return {boolean}
 */
proto.Variable.prototype.getBoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.setBoolean = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.clearBoolean = function() {
  return jspb.Message.setOneofField(this, 1, proto.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Variable.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float single = 2;
 * @return {number}
 */
proto.Variable.prototype.getSingle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.setSingle = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.clearSingle = function() {
  return jspb.Message.setOneofField(this, 2, proto.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Variable.prototype.hasSingle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 integer = 3;
 * @return {number}
 */
proto.Variable.prototype.getInteger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.setInteger = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.clearInteger = function() {
  return jspb.Message.setOneofField(this, 3, proto.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Variable.prototype.hasInteger = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.Variable.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.setText = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.clearText = function() {
  return jspb.Message.setOneofField(this, 4, proto.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Variable.prototype.hasText = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.Variable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Variable} returns this
 */
proto.Variable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    beat: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Heartbeat}
 */
proto.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Heartbeat;
  return proto.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Heartbeat}
 */
proto.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeat();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 beat = 1;
 * @return {number}
 */
proto.Heartbeat.prototype.getBeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Heartbeat} returns this
 */
proto.Heartbeat.prototype.setBeat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Settings.prototype.toObject = function(opt_includeInstance) {
  return proto.Settings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Settings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Settings.toObject = function(includeInstance, msg) {
  var f, obj = {
    settingsDictionaryMap: (f = msg.getSettingsDictionaryMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Settings}
 */
proto.Settings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Settings;
  return proto.Settings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Settings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Settings}
 */
proto.Settings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSettingsDictionaryMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Settings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Settings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Settings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Settings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettingsDictionaryMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> settings_dictionary = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.Settings.prototype.getSettingsDictionaryMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Settings} returns this
 */
proto.Settings.prototype.clearSettingsDictionaryMap = function() {
  this.getSettingsDictionaryMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mesh.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Mesh.prototype.toObject = function(opt_includeInstance) {
  return proto.Mesh.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Mesh} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mesh.toObject = function(includeInstance, msg) {
  var f, obj = {
    facesList: jspb.Message.toObjectList(msg.getFacesList(),
    proto.Int4.toObject, includeInstance),
    verticesList: jspb.Message.toObjectList(msg.getVerticesList(),
    proto.Vector3.toObject, includeInstance),
    normalsList: jspb.Message.toObjectList(msg.getNormalsList(),
    proto.Vector3.toObject, includeInstance),
    meshColor: (f = msg.getMeshColor()) && proto.Int4.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mesh}
 */
proto.Mesh.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Mesh;
  return proto.Mesh.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mesh} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mesh}
 */
proto.Mesh.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Int4;
      reader.readMessage(value,proto.Int4.deserializeBinaryFromReader);
      msg.addFaces(value);
      break;
    case 2:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.addVertices(value);
      break;
    case 3:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.addNormals(value);
      break;
    case 4:
      var value = new proto.Int4;
      reader.readMessage(value,proto.Int4.deserializeBinaryFromReader);
      msg.setMeshColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mesh.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Mesh.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mesh} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mesh.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Int4.serializeBinaryToWriter
    );
  }
  f = message.getVerticesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getNormalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getMeshColor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Int4.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Int4 faces = 1;
 * @return {!Array<!proto.Int4>}
 */
proto.Mesh.prototype.getFacesList = function() {
  return /** @type{!Array<!proto.Int4>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Int4, 1));
};


/**
 * @param {!Array<!proto.Int4>} value
 * @return {!proto.Mesh} returns this
*/
proto.Mesh.prototype.setFacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Int4=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Int4}
 */
proto.Mesh.prototype.addFaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Int4, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mesh} returns this
 */
proto.Mesh.prototype.clearFacesList = function() {
  return this.setFacesList([]);
};


/**
 * repeated Vector3 vertices = 2;
 * @return {!Array<!proto.Vector3>}
 */
proto.Mesh.prototype.getVerticesList = function() {
  return /** @type{!Array<!proto.Vector3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Vector3, 2));
};


/**
 * @param {!Array<!proto.Vector3>} value
 * @return {!proto.Mesh} returns this
*/
proto.Mesh.prototype.setVerticesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Vector3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Vector3}
 */
proto.Mesh.prototype.addVertices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Vector3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mesh} returns this
 */
proto.Mesh.prototype.clearVerticesList = function() {
  return this.setVerticesList([]);
};


/**
 * repeated Vector3 normals = 3;
 * @return {!Array<!proto.Vector3>}
 */
proto.Mesh.prototype.getNormalsList = function() {
  return /** @type{!Array<!proto.Vector3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Vector3, 3));
};


/**
 * @param {!Array<!proto.Vector3>} value
 * @return {!proto.Mesh} returns this
*/
proto.Mesh.prototype.setNormalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Vector3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Vector3}
 */
proto.Mesh.prototype.addNormals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Vector3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Mesh} returns this
 */
proto.Mesh.prototype.clearNormalsList = function() {
  return this.setNormalsList([]);
};


/**
 * optional Int4 mesh_color = 4;
 * @return {?proto.Int4}
 */
proto.Mesh.prototype.getMeshColor = function() {
  return /** @type{?proto.Int4} */ (
    jspb.Message.getWrapperField(this, proto.Int4, 4));
};


/**
 * @param {?proto.Int4|undefined} value
 * @return {!proto.Mesh} returns this
*/
proto.Mesh.prototype.setMeshColor = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Mesh} returns this
 */
proto.Mesh.prototype.clearMeshColor = function() {
  return this.setMeshColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Mesh.prototype.hasMeshColor = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PolyMesh.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PolyMesh.prototype.toObject = function(opt_includeInstance) {
  return proto.PolyMesh.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PolyMesh} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PolyMesh.toObject = function(includeInstance, msg) {
  var f, obj = {
    meshesList: jspb.Message.toObjectList(msg.getMeshesList(),
    proto.Mesh.toObject, includeInstance),
    collisionConvexHullList: jspb.Message.toObjectList(msg.getCollisionConvexHullList(),
    proto.Mesh.toObject, includeInstance),
    transform: (f = msg.getTransform()) && proto.Matrix4x4.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PolyMesh}
 */
proto.PolyMesh.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PolyMesh;
  return proto.PolyMesh.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PolyMesh} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PolyMesh}
 */
proto.PolyMesh.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Mesh;
      reader.readMessage(value,proto.Mesh.deserializeBinaryFromReader);
      msg.addMeshes(value);
      break;
    case 2:
      var value = new proto.Mesh;
      reader.readMessage(value,proto.Mesh.deserializeBinaryFromReader);
      msg.addCollisionConvexHull(value);
      break;
    case 3:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PolyMesh.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PolyMesh.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PolyMesh} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PolyMesh.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeshesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Mesh.serializeBinaryToWriter
    );
  }
  f = message.getCollisionConvexHullList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Mesh.serializeBinaryToWriter
    );
  }
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated Mesh meshes = 1;
 * @return {!Array<!proto.Mesh>}
 */
proto.PolyMesh.prototype.getMeshesList = function() {
  return /** @type{!Array<!proto.Mesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mesh, 1));
};


/**
 * @param {!Array<!proto.Mesh>} value
 * @return {!proto.PolyMesh} returns this
*/
proto.PolyMesh.prototype.setMeshesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Mesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mesh}
 */
proto.PolyMesh.prototype.addMeshes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Mesh, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PolyMesh} returns this
 */
proto.PolyMesh.prototype.clearMeshesList = function() {
  return this.setMeshesList([]);
};


/**
 * repeated Mesh collision_convex_hull = 2;
 * @return {!Array<!proto.Mesh>}
 */
proto.PolyMesh.prototype.getCollisionConvexHullList = function() {
  return /** @type{!Array<!proto.Mesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Mesh, 2));
};


/**
 * @param {!Array<!proto.Mesh>} value
 * @return {!proto.PolyMesh} returns this
*/
proto.PolyMesh.prototype.setCollisionConvexHullList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Mesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mesh}
 */
proto.PolyMesh.prototype.addCollisionConvexHull = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Mesh, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PolyMesh} returns this
 */
proto.PolyMesh.prototype.clearCollisionConvexHullList = function() {
  return this.setCollisionConvexHullList([]);
};


/**
 * optional Matrix4x4 transform = 3;
 * @return {?proto.Matrix4x4}
 */
proto.PolyMesh.prototype.getTransform = function() {
  return /** @type{?proto.Matrix4x4} */ (
    jspb.Message.getWrapperField(this, proto.Matrix4x4, 3));
};


/**
 * @param {?proto.Matrix4x4|undefined} value
 * @return {!proto.PolyMesh} returns this
*/
proto.PolyMesh.prototype.setTransform = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PolyMesh} returns this
 */
proto.PolyMesh.prototype.clearTransform = function() {
  return this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PolyMesh.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.PolyMesh.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PolyMesh} returns this
 */
proto.PolyMesh.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TransformationArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransformationArray.prototype.toObject = function(opt_includeInstance) {
  return proto.TransformationArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransformationArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransformationArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    transformationList: jspb.Message.toObjectList(msg.getTransformationList(),
    proto.Matrix4x4.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransformationArray}
 */
proto.TransformationArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransformationArray;
  return proto.TransformationArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransformationArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransformationArray}
 */
proto.TransformationArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.addTransformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransformationArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransformationArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransformationArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransformationArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransformationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Matrix4x4 transformation = 1;
 * @return {!Array<!proto.Matrix4x4>}
 */
proto.TransformationArray.prototype.getTransformationList = function() {
  return /** @type{!Array<!proto.Matrix4x4>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Matrix4x4, 1));
};


/**
 * @param {!Array<!proto.Matrix4x4>} value
 * @return {!proto.TransformationArray} returns this
*/
proto.TransformationArray.prototype.setTransformationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Matrix4x4=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Matrix4x4}
 */
proto.TransformationArray.prototype.addTransformation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Matrix4x4, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TransformationArray} returns this
 */
proto.TransformationArray.prototype.clearTransformationList = function() {
  return this.setTransformationList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VariableArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VariableArray.prototype.toObject = function(opt_includeInstance) {
  return proto.VariableArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VariableArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VariableArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.Variable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VariableArray}
 */
proto.VariableArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VariableArray;
  return proto.VariableArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VariableArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VariableArray}
 */
proto.VariableArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Variable;
      reader.readMessage(value,proto.Variable.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VariableArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VariableArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VariableArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VariableArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Variable variables = 1;
 * @return {!Array<!proto.Variable>}
 */
proto.VariableArray.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Variable, 1));
};


/**
 * @param {!Array<!proto.Variable>} value
 * @return {!proto.VariableArray} returns this
*/
proto.VariableArray.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Variable}
 */
proto.VariableArray.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VariableArray} returns this
 */
proto.VariableArray.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.MetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MetaData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MetaData}
 */
proto.MetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MetaData;
  return proto.MetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MetaData}
 */
proto.MetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.MetaData.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MetaData} returns this
 */
proto.MetaData.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> data = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.MetaData.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.MetaData} returns this
 */
proto.MetaData.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubscribeRobotFeedbackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SubscribeRobotFeedbackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubscribeRobotFeedbackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubscribeRobotFeedbackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubscribeRobotFeedbackRequest}
 */
proto.SubscribeRobotFeedbackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubscribeRobotFeedbackRequest;
  return proto.SubscribeRobotFeedbackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubscribeRobotFeedbackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubscribeRobotFeedbackRequest}
 */
proto.SubscribeRobotFeedbackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubscribeRobotFeedbackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubscribeRobotFeedbackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubscribeRobotFeedbackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubscribeRobotFeedbackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.SubscribeRobotFeedbackRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SubscribeRobotFeedbackRequest} returns this
 */
proto.SubscribeRobotFeedbackRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RobotFeedback.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.RobotFeedback.DataPackageCase = {
  DATA_PACKAGE_NOT_SET: 0,
  HEARTBEAT_DATA: 2,
  ROBOT_STATE_DATA: 3,
  SETTINGS_DATA: 4,
  PING_DATA: 5
};

/**
 * @return {proto.RobotFeedback.DataPackageCase}
 */
proto.RobotFeedback.prototype.getDataPackageCase = function() {
  return /** @type {proto.RobotFeedback.DataPackageCase} */(jspb.Message.computeOneofCase(this, proto.RobotFeedback.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RobotFeedback.prototype.toObject = function(opt_includeInstance) {
  return proto.RobotFeedback.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RobotFeedback} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotFeedback.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    heartbeatData: (f = msg.getHeartbeatData()) && proto.Heartbeat.toObject(includeInstance, f),
    robotStateData: (f = msg.getRobotStateData()) && proto.RobotState.toObject(includeInstance, f),
    settingsData: (f = msg.getSettingsData()) && proto.Settings.toObject(includeInstance, f),
    pingData: (f = msg.getPingData()) && proto.Ping.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RobotFeedback}
 */
proto.RobotFeedback.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RobotFeedback;
  return proto.RobotFeedback.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RobotFeedback} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RobotFeedback}
 */
proto.RobotFeedback.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.Heartbeat;
      reader.readMessage(value,proto.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeatData(value);
      break;
    case 3:
      var value = new proto.RobotState;
      reader.readMessage(value,proto.RobotState.deserializeBinaryFromReader);
      msg.setRobotStateData(value);
      break;
    case 4:
      var value = new proto.Settings;
      reader.readMessage(value,proto.Settings.deserializeBinaryFromReader);
      msg.setSettingsData(value);
      break;
    case 5:
      var value = new proto.Ping;
      reader.readMessage(value,proto.Ping.deserializeBinaryFromReader);
      msg.setPingData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RobotFeedback.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RobotFeedback.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RobotFeedback} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotFeedback.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeartbeatData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getRobotStateData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.RobotState.serializeBinaryToWriter
    );
  }
  f = message.getSettingsData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Settings.serializeBinaryToWriter
    );
  }
  f = message.getPingData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Ping.serializeBinaryToWriter
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.RobotFeedback.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RobotFeedback} returns this
 */
proto.RobotFeedback.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Heartbeat heartbeat_data = 2;
 * @return {?proto.Heartbeat}
 */
proto.RobotFeedback.prototype.getHeartbeatData = function() {
  return /** @type{?proto.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.Heartbeat, 2));
};


/**
 * @param {?proto.Heartbeat|undefined} value
 * @return {!proto.RobotFeedback} returns this
*/
proto.RobotFeedback.prototype.setHeartbeatData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.RobotFeedback.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotFeedback} returns this
 */
proto.RobotFeedback.prototype.clearHeartbeatData = function() {
  return this.setHeartbeatData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotFeedback.prototype.hasHeartbeatData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RobotState robot_state_data = 3;
 * @return {?proto.RobotState}
 */
proto.RobotFeedback.prototype.getRobotStateData = function() {
  return /** @type{?proto.RobotState} */ (
    jspb.Message.getWrapperField(this, proto.RobotState, 3));
};


/**
 * @param {?proto.RobotState|undefined} value
 * @return {!proto.RobotFeedback} returns this
*/
proto.RobotFeedback.prototype.setRobotStateData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.RobotFeedback.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotFeedback} returns this
 */
proto.RobotFeedback.prototype.clearRobotStateData = function() {
  return this.setRobotStateData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotFeedback.prototype.hasRobotStateData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Settings settings_data = 4;
 * @return {?proto.Settings}
 */
proto.RobotFeedback.prototype.getSettingsData = function() {
  return /** @type{?proto.Settings} */ (
    jspb.Message.getWrapperField(this, proto.Settings, 4));
};


/**
 * @param {?proto.Settings|undefined} value
 * @return {!proto.RobotFeedback} returns this
*/
proto.RobotFeedback.prototype.setSettingsData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.RobotFeedback.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotFeedback} returns this
 */
proto.RobotFeedback.prototype.clearSettingsData = function() {
  return this.setSettingsData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotFeedback.prototype.hasSettingsData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Ping ping_data = 5;
 * @return {?proto.Ping}
 */
proto.RobotFeedback.prototype.getPingData = function() {
  return /** @type{?proto.Ping} */ (
    jspb.Message.getWrapperField(this, proto.Ping, 5));
};


/**
 * @param {?proto.Ping|undefined} value
 * @return {!proto.RobotFeedback} returns this
*/
proto.RobotFeedback.prototype.setPingData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.RobotFeedback.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotFeedback} returns this
 */
proto.RobotFeedback.prototype.clearPingData = function() {
  return this.setPingData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotFeedback.prototype.hasPingData = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetSimulatedRobotStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetSimulatedRobotStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetSimulatedRobotStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSimulatedRobotStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    normalizedState: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    streamUpdate: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetSimulatedRobotStateRequest}
 */
proto.GetSimulatedRobotStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetSimulatedRobotStateRequest;
  return proto.GetSimulatedRobotStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetSimulatedRobotStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetSimulatedRobotStateRequest}
 */
proto.GetSimulatedRobotStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNormalizedState(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStreamUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetSimulatedRobotStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetSimulatedRobotStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetSimulatedRobotStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetSimulatedRobotStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNormalizedState();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getStreamUpdate();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.GetSimulatedRobotStateRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetSimulatedRobotStateRequest} returns this
 */
proto.GetSimulatedRobotStateRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float normalized_state = 2;
 * @return {number}
 */
proto.GetSimulatedRobotStateRequest.prototype.getNormalizedState = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GetSimulatedRobotStateRequest} returns this
 */
proto.GetSimulatedRobotStateRequest.prototype.setNormalizedState = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool stream_update = 3;
 * @return {boolean}
 */
proto.GetSimulatedRobotStateRequest.prototype.getStreamUpdate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GetSimulatedRobotStateRequest} returns this
 */
proto.GetSimulatedRobotStateRequest.prototype.setStreamUpdate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddRobotTaskRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AddRobotTaskRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddRobotTaskRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddRobotTaskRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    robotTask: (f = msg.getRobotTask()) && proto.Task.toObject(includeInstance, f),
    robotSettings: (f = msg.getRobotSettings()) && proto.Settings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddRobotTaskRequest}
 */
proto.AddRobotTaskRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddRobotTaskRequest;
  return proto.AddRobotTaskRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddRobotTaskRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddRobotTaskRequest}
 */
proto.AddRobotTaskRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Task;
      reader.readMessage(value,proto.Task.deserializeBinaryFromReader);
      msg.setRobotTask(value);
      break;
    case 3:
      var value = new proto.Settings;
      reader.readMessage(value,proto.Settings.deserializeBinaryFromReader);
      msg.setRobotSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddRobotTaskRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddRobotTaskRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddRobotTaskRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddRobotTaskRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRobotTask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Task.serializeBinaryToWriter
    );
  }
  f = message.getRobotSettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Settings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.AddRobotTaskRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddRobotTaskRequest} returns this
 */
proto.AddRobotTaskRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Task robot_task = 2;
 * @return {?proto.Task}
 */
proto.AddRobotTaskRequest.prototype.getRobotTask = function() {
  return /** @type{?proto.Task} */ (
    jspb.Message.getWrapperField(this, proto.Task, 2));
};


/**
 * @param {?proto.Task|undefined} value
 * @return {!proto.AddRobotTaskRequest} returns this
*/
proto.AddRobotTaskRequest.prototype.setRobotTask = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AddRobotTaskRequest} returns this
 */
proto.AddRobotTaskRequest.prototype.clearRobotTask = function() {
  return this.setRobotTask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AddRobotTaskRequest.prototype.hasRobotTask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Settings robot_settings = 3;
 * @return {?proto.Settings}
 */
proto.AddRobotTaskRequest.prototype.getRobotSettings = function() {
  return /** @type{?proto.Settings} */ (
    jspb.Message.getWrapperField(this, proto.Settings, 3));
};


/**
 * @param {?proto.Settings|undefined} value
 * @return {!proto.AddRobotTaskRequest} returns this
*/
proto.AddRobotTaskRequest.prototype.setRobotSettings = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AddRobotTaskRequest} returns this
 */
proto.AddRobotTaskRequest.prototype.clearRobotSettings = function() {
  return this.setRobotSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AddRobotTaskRequest.prototype.hasRobotSettings = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddRobotTaskReply.prototype.toObject = function(opt_includeInstance) {
  return proto.AddRobotTaskReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddRobotTaskReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddRobotTaskReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    simulationResultData: (f = msg.getSimulationResultData()) && proto.SimulationResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddRobotTaskReply}
 */
proto.AddRobotTaskReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddRobotTaskReply;
  return proto.AddRobotTaskReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddRobotTaskReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddRobotTaskReply}
 */
proto.AddRobotTaskReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.SimulationResult;
      reader.readMessage(value,proto.SimulationResult.deserializeBinaryFromReader);
      msg.setSimulationResultData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddRobotTaskReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddRobotTaskReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddRobotTaskReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddRobotTaskReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSimulationResultData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SimulationResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.AddRobotTaskReply.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddRobotTaskReply} returns this
 */
proto.AddRobotTaskReply.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SimulationResult simulation_result_data = 2;
 * @return {?proto.SimulationResult}
 */
proto.AddRobotTaskReply.prototype.getSimulationResultData = function() {
  return /** @type{?proto.SimulationResult} */ (
    jspb.Message.getWrapperField(this, proto.SimulationResult, 2));
};


/**
 * @param {?proto.SimulationResult|undefined} value
 * @return {!proto.AddRobotTaskReply} returns this
*/
proto.AddRobotTaskReply.prototype.setSimulationResultData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AddRobotTaskReply} returns this
 */
proto.AddRobotTaskReply.prototype.clearSimulationResultData = function() {
  return this.setSimulationResultData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AddRobotTaskReply.prototype.hasSimulationResultData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateVariableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateVariableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateVariableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateVariableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pb_var: (f = msg.getVar()) && proto.Variable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateVariableRequest}
 */
proto.UpdateVariableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateVariableRequest;
  return proto.UpdateVariableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateVariableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateVariableRequest}
 */
proto.UpdateVariableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Variable;
      reader.readMessage(value,proto.Variable.deserializeBinaryFromReader);
      msg.setVar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateVariableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateVariableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateVariableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateVariableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVar();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.UpdateVariableRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.UpdateVariableRequest} returns this
 */
proto.UpdateVariableRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Variable var = 2;
 * @return {?proto.Variable}
 */
proto.UpdateVariableRequest.prototype.getVar = function() {
  return /** @type{?proto.Variable} */ (
    jspb.Message.getWrapperField(this, proto.Variable, 2));
};


/**
 * @param {?proto.Variable|undefined} value
 * @return {!proto.UpdateVariableRequest} returns this
*/
proto.UpdateVariableRequest.prototype.setVar = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UpdateVariableRequest} returns this
 */
proto.UpdateVariableRequest.prototype.clearVar = function() {
  return this.setVar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UpdateVariableRequest.prototype.hasVar = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UpdateVariableReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateVariableReply.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateVariableReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateVariableReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateVariableReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    idList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.VariableArray.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateVariableReply}
 */
proto.UpdateVariableReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateVariableReply;
  return proto.UpdateVariableReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateVariableReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateVariableReply}
 */
proto.UpdateVariableReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addId(value);
      break;
    case 2:
      var value = new proto.VariableArray;
      reader.readMessage(value,proto.VariableArray.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateVariableReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateVariableReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateVariableReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateVariableReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.VariableArray.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string id = 1;
 * @return {!Array<string>}
 */
proto.UpdateVariableReply.prototype.getIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.UpdateVariableReply} returns this
 */
proto.UpdateVariableReply.prototype.setIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.UpdateVariableReply} returns this
 */
proto.UpdateVariableReply.prototype.addId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.UpdateVariableReply} returns this
 */
proto.UpdateVariableReply.prototype.clearIdList = function() {
  return this.setIdList([]);
};


/**
 * repeated VariableArray variables = 2;
 * @return {!Array<!proto.VariableArray>}
 */
proto.UpdateVariableReply.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.VariableArray>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VariableArray, 2));
};


/**
 * @param {!Array<!proto.VariableArray>} value
 * @return {!proto.UpdateVariableReply} returns this
*/
proto.UpdateVariableReply.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.VariableArray=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VariableArray}
 */
proto.UpdateVariableReply.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.VariableArray, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.UpdateVariableReply} returns this
 */
proto.UpdateVariableReply.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetupRobotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SetupRobotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetupRobotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetupRobotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    softwareVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    robotSetup: (f = msg.getRobotSetup()) && proto.Robot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetupRobotRequest}
 */
proto.SetupRobotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetupRobotRequest;
  return proto.SetupRobotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetupRobotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetupRobotRequest}
 */
proto.SetupRobotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftwareVersion(value);
      break;
    case 3:
      var value = new proto.Robot;
      reader.readMessage(value,proto.Robot.deserializeBinaryFromReader);
      msg.setRobotSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetupRobotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetupRobotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetupRobotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetupRobotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSoftwareVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRobotSetup();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Robot.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.SetupRobotRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SetupRobotRequest} returns this
 */
proto.SetupRobotRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string software_version = 2;
 * @return {string}
 */
proto.SetupRobotRequest.prototype.getSoftwareVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SetupRobotRequest} returns this
 */
proto.SetupRobotRequest.prototype.setSoftwareVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Robot robot_setup = 3;
 * @return {?proto.Robot}
 */
proto.SetupRobotRequest.prototype.getRobotSetup = function() {
  return /** @type{?proto.Robot} */ (
    jspb.Message.getWrapperField(this, proto.Robot, 3));
};


/**
 * @param {?proto.Robot|undefined} value
 * @return {!proto.SetupRobotRequest} returns this
*/
proto.SetupRobotRequest.prototype.setRobotSetup = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SetupRobotRequest} returns this
 */
proto.SetupRobotRequest.prototype.clearRobotSetup = function() {
  return this.setRobotSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetupRobotRequest.prototype.hasRobotSetup = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetupRobotReply.prototype.toObject = function(opt_includeInstance) {
  return proto.SetupRobotReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetupRobotReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetupRobotReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    licenseState: jspb.Message.getFieldWithDefault(msg, 3, ""),
    robotSettings: (f = msg.getRobotSettings()) && proto.Settings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetupRobotReply}
 */
proto.SetupRobotReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetupRobotReply;
  return proto.SetupRobotReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetupRobotReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetupRobotReply}
 */
proto.SetupRobotReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicenseState(value);
      break;
    case 4:
      var value = new proto.Settings;
      reader.readMessage(value,proto.Settings.deserializeBinaryFromReader);
      msg.setRobotSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetupRobotReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetupRobotReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetupRobotReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetupRobotReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLicenseState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRobotSettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Settings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.SetupRobotReply.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SetupRobotReply} returns this
 */
proto.SetupRobotReply.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.SetupRobotReply.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SetupRobotReply} returns this
 */
proto.SetupRobotReply.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string license_state = 3;
 * @return {string}
 */
proto.SetupRobotReply.prototype.getLicenseState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.SetupRobotReply} returns this
 */
proto.SetupRobotReply.prototype.setLicenseState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Settings robot_settings = 4;
 * @return {?proto.Settings}
 */
proto.SetupRobotReply.prototype.getRobotSettings = function() {
  return /** @type{?proto.Settings} */ (
    jspb.Message.getWrapperField(this, proto.Settings, 4));
};


/**
 * @param {?proto.Settings|undefined} value
 * @return {!proto.SetupRobotReply} returns this
*/
proto.SetupRobotReply.prototype.setRobotSettings = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SetupRobotReply} returns this
 */
proto.SetupRobotReply.prototype.clearRobotSettings = function() {
  return this.setRobotSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetupRobotReply.prototype.hasRobotSettings = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Robot.repeatedFields_ = [7,8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Robot.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Robot.RobotDataCase = {
  ROBOT_DATA_NOT_SET: 0,
  PRESET_ROBOT_CLASS: 1,
  CUSTOM_ROBOT: 2
};

/**
 * @return {proto.Robot.RobotDataCase}
 */
proto.Robot.prototype.getRobotDataCase = function() {
  return /** @type {proto.Robot.RobotDataCase} */(jspb.Message.computeOneofCase(this, proto.Robot.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Robot.prototype.toObject = function(opt_includeInstance) {
  return proto.Robot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Robot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Robot.toObject = function(includeInstance, msg) {
  var f, obj = {
    presetRobotClass: jspb.Message.getFieldWithDefault(msg, 1, ""),
    customRobot: (f = msg.getCustomRobot()) && proto.CustomRobot.toObject(includeInstance, f),
    robotDriverClass: jspb.Message.getFieldWithDefault(msg, 3, ""),
    friendlyId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    toolDictionaryMap: (f = msg.getToolDictionaryMap()) ? f.toObject(includeInstance, proto.Tool.toObject) : [],
    initialBase: (f = msg.getInitialBase()) && proto.Base.toObject(includeInstance, f),
    collisionGeometryList: jspb.Message.toObjectList(msg.getCollisionGeometryList(),
    proto.PolyMesh.toObject, includeInstance),
    externalAxesList: jspb.Message.toObjectList(msg.getExternalAxesList(),
    proto.ExternalAxis.toObject, includeInstance),
    data: (f = msg.getData()) && proto.MetaData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Robot}
 */
proto.Robot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Robot;
  return proto.Robot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Robot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Robot}
 */
proto.Robot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPresetRobotClass(value);
      break;
    case 2:
      var value = new proto.CustomRobot;
      reader.readMessage(value,proto.CustomRobot.deserializeBinaryFromReader);
      msg.setCustomRobot(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRobotDriverClass(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendlyId(value);
      break;
    case 5:
      var value = msg.getToolDictionaryMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Tool.deserializeBinaryFromReader, "", new proto.Tool());
         });
      break;
    case 6:
      var value = new proto.Base;
      reader.readMessage(value,proto.Base.deserializeBinaryFromReader);
      msg.setInitialBase(value);
      break;
    case 7:
      var value = new proto.PolyMesh;
      reader.readMessage(value,proto.PolyMesh.deserializeBinaryFromReader);
      msg.addCollisionGeometry(value);
      break;
    case 8:
      var value = new proto.ExternalAxis;
      reader.readMessage(value,proto.ExternalAxis.deserializeBinaryFromReader);
      msg.addExternalAxes(value);
      break;
    case 9:
      var value = new proto.MetaData;
      reader.readMessage(value,proto.MetaData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Robot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Robot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Robot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Robot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCustomRobot();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CustomRobot.serializeBinaryToWriter
    );
  }
  f = message.getRobotDriverClass();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFriendlyId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getToolDictionaryMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Tool.serializeBinaryToWriter);
  }
  f = message.getInitialBase();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Base.serializeBinaryToWriter
    );
  }
  f = message.getCollisionGeometryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.PolyMesh.serializeBinaryToWriter
    );
  }
  f = message.getExternalAxesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.ExternalAxis.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.MetaData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string preset_robot_class = 1;
 * @return {string}
 */
proto.Robot.prototype.getPresetRobotClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Robot} returns this
 */
proto.Robot.prototype.setPresetRobotClass = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.Robot.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Robot} returns this
 */
proto.Robot.prototype.clearPresetRobotClass = function() {
  return jspb.Message.setOneofField(this, 1, proto.Robot.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Robot.prototype.hasPresetRobotClass = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CustomRobot custom_robot = 2;
 * @return {?proto.CustomRobot}
 */
proto.Robot.prototype.getCustomRobot = function() {
  return /** @type{?proto.CustomRobot} */ (
    jspb.Message.getWrapperField(this, proto.CustomRobot, 2));
};


/**
 * @param {?proto.CustomRobot|undefined} value
 * @return {!proto.Robot} returns this
*/
proto.Robot.prototype.setCustomRobot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Robot.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Robot} returns this
 */
proto.Robot.prototype.clearCustomRobot = function() {
  return this.setCustomRobot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Robot.prototype.hasCustomRobot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string robot_driver_class = 3;
 * @return {string}
 */
proto.Robot.prototype.getRobotDriverClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Robot} returns this
 */
proto.Robot.prototype.setRobotDriverClass = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string friendly_id = 4;
 * @return {string}
 */
proto.Robot.prototype.getFriendlyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Robot} returns this
 */
proto.Robot.prototype.setFriendlyId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, Tool> tool_dictionary = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Tool>}
 */
proto.Robot.prototype.getToolDictionaryMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Tool>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.Tool));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Robot} returns this
 */
proto.Robot.prototype.clearToolDictionaryMap = function() {
  this.getToolDictionaryMap().clear();
  return this;};


/**
 * optional Base initial_base = 6;
 * @return {?proto.Base}
 */
proto.Robot.prototype.getInitialBase = function() {
  return /** @type{?proto.Base} */ (
    jspb.Message.getWrapperField(this, proto.Base, 6));
};


/**
 * @param {?proto.Base|undefined} value
 * @return {!proto.Robot} returns this
*/
proto.Robot.prototype.setInitialBase = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Robot} returns this
 */
proto.Robot.prototype.clearInitialBase = function() {
  return this.setInitialBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Robot.prototype.hasInitialBase = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated PolyMesh collision_geometry = 7;
 * @return {!Array<!proto.PolyMesh>}
 */
proto.Robot.prototype.getCollisionGeometryList = function() {
  return /** @type{!Array<!proto.PolyMesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PolyMesh, 7));
};


/**
 * @param {!Array<!proto.PolyMesh>} value
 * @return {!proto.Robot} returns this
*/
proto.Robot.prototype.setCollisionGeometryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.PolyMesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PolyMesh}
 */
proto.Robot.prototype.addCollisionGeometry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.PolyMesh, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Robot} returns this
 */
proto.Robot.prototype.clearCollisionGeometryList = function() {
  return this.setCollisionGeometryList([]);
};


/**
 * repeated ExternalAxis external_axes = 8;
 * @return {!Array<!proto.ExternalAxis>}
 */
proto.Robot.prototype.getExternalAxesList = function() {
  return /** @type{!Array<!proto.ExternalAxis>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ExternalAxis, 8));
};


/**
 * @param {!Array<!proto.ExternalAxis>} value
 * @return {!proto.Robot} returns this
*/
proto.Robot.prototype.setExternalAxesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ExternalAxis=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ExternalAxis}
 */
proto.Robot.prototype.addExternalAxes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ExternalAxis, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Robot} returns this
 */
proto.Robot.prototype.clearExternalAxesList = function() {
  return this.setExternalAxesList([]);
};


/**
 * optional MetaData data = 9;
 * @return {?proto.MetaData}
 */
proto.Robot.prototype.getData = function() {
  return /** @type{?proto.MetaData} */ (
    jspb.Message.getWrapperField(this, proto.MetaData, 9));
};


/**
 * @param {?proto.MetaData|undefined} value
 * @return {!proto.Robot} returns this
*/
proto.Robot.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Robot} returns this
 */
proto.Robot.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Robot.prototype.hasData = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tool.prototype.toObject = function(opt_includeInstance) {
  return proto.Tool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tool.toObject = function(includeInstance, msg) {
  var f, obj = {
    toolType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tcp: (f = msg.getTcp()) && proto.CartesianPosition.toObject(includeInstance, f),
    toolId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    toolState: jspb.Message.getFieldWithDefault(msg, 4, 0),
    toolGeometry: (f = msg.getToolGeometry()) && proto.PolyMesh.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tool}
 */
proto.Tool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tool;
  return proto.Tool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tool}
 */
proto.Tool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.FrameType} */ (reader.readEnum());
      msg.setToolType(value);
      break;
    case 2:
      var value = new proto.CartesianPosition;
      reader.readMessage(value,proto.CartesianPosition.deserializeBinaryFromReader);
      msg.setTcp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToolId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setToolState(value);
      break;
    case 5:
      var value = new proto.PolyMesh;
      reader.readMessage(value,proto.PolyMesh.deserializeBinaryFromReader);
      msg.setToolGeometry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToolType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTcp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CartesianPosition.serializeBinaryToWriter
    );
  }
  f = message.getToolId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToolState();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getToolGeometry();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.PolyMesh.serializeBinaryToWriter
    );
  }
};


/**
 * optional FrameType tool_type = 1;
 * @return {!proto.FrameType}
 */
proto.Tool.prototype.getToolType = function() {
  return /** @type {!proto.FrameType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.FrameType} value
 * @return {!proto.Tool} returns this
 */
proto.Tool.prototype.setToolType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CartesianPosition tcp = 2;
 * @return {?proto.CartesianPosition}
 */
proto.Tool.prototype.getTcp = function() {
  return /** @type{?proto.CartesianPosition} */ (
    jspb.Message.getWrapperField(this, proto.CartesianPosition, 2));
};


/**
 * @param {?proto.CartesianPosition|undefined} value
 * @return {!proto.Tool} returns this
*/
proto.Tool.prototype.setTcp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Tool} returns this
 */
proto.Tool.prototype.clearTcp = function() {
  return this.setTcp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Tool.prototype.hasTcp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string tool_id = 3;
 * @return {string}
 */
proto.Tool.prototype.getToolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tool} returns this
 */
proto.Tool.prototype.setToolId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 tool_state = 4;
 * @return {number}
 */
proto.Tool.prototype.getToolState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tool} returns this
 */
proto.Tool.prototype.setToolState = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional PolyMesh tool_geometry = 5;
 * @return {?proto.PolyMesh}
 */
proto.Tool.prototype.getToolGeometry = function() {
  return /** @type{?proto.PolyMesh} */ (
    jspb.Message.getWrapperField(this, proto.PolyMesh, 5));
};


/**
 * @param {?proto.PolyMesh|undefined} value
 * @return {!proto.Tool} returns this
*/
proto.Tool.prototype.setToolGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Tool} returns this
 */
proto.Tool.prototype.clearToolGeometry = function() {
  return this.setToolGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Tool.prototype.hasToolGeometry = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Base.prototype.toObject = function(opt_includeInstance) {
  return proto.Base.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Base} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Base.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    baseFrame: (f = msg.getBaseFrame()) && proto.CartesianPosition.toObject(includeInstance, f),
    baseId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Base}
 */
proto.Base.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Base;
  return proto.Base.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Base} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Base}
 */
proto.Base.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.FrameType} */ (reader.readEnum());
      msg.setBaseType(value);
      break;
    case 2:
      var value = new proto.CartesianPosition;
      reader.readMessage(value,proto.CartesianPosition.deserializeBinaryFromReader);
      msg.setBaseFrame(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Base.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Base.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Base} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Base.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBaseFrame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CartesianPosition.serializeBinaryToWriter
    );
  }
  f = message.getBaseId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional FrameType base_type = 1;
 * @return {!proto.FrameType}
 */
proto.Base.prototype.getBaseType = function() {
  return /** @type {!proto.FrameType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.FrameType} value
 * @return {!proto.Base} returns this
 */
proto.Base.prototype.setBaseType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CartesianPosition base_frame = 2;
 * @return {?proto.CartesianPosition}
 */
proto.Base.prototype.getBaseFrame = function() {
  return /** @type{?proto.CartesianPosition} */ (
    jspb.Message.getWrapperField(this, proto.CartesianPosition, 2));
};


/**
 * @param {?proto.CartesianPosition|undefined} value
 * @return {!proto.Base} returns this
*/
proto.Base.prototype.setBaseFrame = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Base} returns this
 */
proto.Base.prototype.clearBaseFrame = function() {
  return this.setBaseFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Base.prototype.hasBaseFrame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string base_id = 3;
 * @return {string}
 */
proto.Base.prototype.getBaseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Base} returns this
 */
proto.Base.prototype.setBaseId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CustomRobot.repeatedFields_ = [1,2,3,4,5,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CustomRobot.prototype.toObject = function(opt_includeInstance) {
  return proto.CustomRobot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CustomRobot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CustomRobot.toObject = function(includeInstance, msg) {
  var f, obj = {
    axisCenterList: jspb.Message.toObjectList(msg.getAxisCenterList(),
    proto.Vector3.toObject, includeInstance),
    axisDirectionList: jspb.Message.toObjectList(msg.getAxisDirectionList(),
    proto.Vector3.toObject, includeInstance),
    axisSpeedList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    axisRangeMinList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    axisRangeMaxList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    shortName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    geometryList: jspb.Message.toObjectList(msg.getGeometryList(),
    proto.PolyMesh.toObject, includeInstance),
    rootCs: (f = msg.getRootCs()) && proto.Matrix4x4.toObject(includeInstance, f),
    flangeCs: (f = msg.getFlangeCs()) && proto.Matrix4x4.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CustomRobot}
 */
proto.CustomRobot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CustomRobot;
  return proto.CustomRobot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CustomRobot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CustomRobot}
 */
proto.CustomRobot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.addAxisCenter(value);
      break;
    case 2:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.addAxisDirection(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setAxisSpeedList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setAxisRangeMinList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setAxisRangeMaxList(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortName(value);
      break;
    case 8:
      var value = new proto.PolyMesh;
      reader.readMessage(value,proto.PolyMesh.deserializeBinaryFromReader);
      msg.addGeometry(value);
      break;
    case 9:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.setRootCs(value);
      break;
    case 10:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.setFlangeCs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CustomRobot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CustomRobot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CustomRobot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CustomRobot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAxisCenterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getAxisDirectionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getAxisSpeedList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getAxisRangeMinList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getAxisRangeMaxList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getShortName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGeometryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.PolyMesh.serializeBinaryToWriter
    );
  }
  f = message.getRootCs();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
  f = message.getFlangeCs();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Vector3 axis_center = 1;
 * @return {!Array<!proto.Vector3>}
 */
proto.CustomRobot.prototype.getAxisCenterList = function() {
  return /** @type{!Array<!proto.Vector3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Vector3, 1));
};


/**
 * @param {!Array<!proto.Vector3>} value
 * @return {!proto.CustomRobot} returns this
*/
proto.CustomRobot.prototype.setAxisCenterList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Vector3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Vector3}
 */
proto.CustomRobot.prototype.addAxisCenter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Vector3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.clearAxisCenterList = function() {
  return this.setAxisCenterList([]);
};


/**
 * repeated Vector3 axis_direction = 2;
 * @return {!Array<!proto.Vector3>}
 */
proto.CustomRobot.prototype.getAxisDirectionList = function() {
  return /** @type{!Array<!proto.Vector3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Vector3, 2));
};


/**
 * @param {!Array<!proto.Vector3>} value
 * @return {!proto.CustomRobot} returns this
*/
proto.CustomRobot.prototype.setAxisDirectionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Vector3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Vector3}
 */
proto.CustomRobot.prototype.addAxisDirection = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Vector3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.clearAxisDirectionList = function() {
  return this.setAxisDirectionList([]);
};


/**
 * repeated float axis_speed = 3;
 * @return {!Array<number>}
 */
proto.CustomRobot.prototype.getAxisSpeedList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.setAxisSpeedList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.addAxisSpeed = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.clearAxisSpeedList = function() {
  return this.setAxisSpeedList([]);
};


/**
 * repeated float axis_range_min = 4;
 * @return {!Array<number>}
 */
proto.CustomRobot.prototype.getAxisRangeMinList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.setAxisRangeMinList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.addAxisRangeMin = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.clearAxisRangeMinList = function() {
  return this.setAxisRangeMinList([]);
};


/**
 * repeated float axis_range_max = 5;
 * @return {!Array<number>}
 */
proto.CustomRobot.prototype.getAxisRangeMaxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.setAxisRangeMaxList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.addAxisRangeMax = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.clearAxisRangeMaxList = function() {
  return this.setAxisRangeMaxList([]);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.CustomRobot.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string short_name = 7;
 * @return {string}
 */
proto.CustomRobot.prototype.getShortName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.setShortName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated PolyMesh geometry = 8;
 * @return {!Array<!proto.PolyMesh>}
 */
proto.CustomRobot.prototype.getGeometryList = function() {
  return /** @type{!Array<!proto.PolyMesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PolyMesh, 8));
};


/**
 * @param {!Array<!proto.PolyMesh>} value
 * @return {!proto.CustomRobot} returns this
*/
proto.CustomRobot.prototype.setGeometryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.PolyMesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PolyMesh}
 */
proto.CustomRobot.prototype.addGeometry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.PolyMesh, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.clearGeometryList = function() {
  return this.setGeometryList([]);
};


/**
 * optional Matrix4x4 root_cs = 9;
 * @return {?proto.Matrix4x4}
 */
proto.CustomRobot.prototype.getRootCs = function() {
  return /** @type{?proto.Matrix4x4} */ (
    jspb.Message.getWrapperField(this, proto.Matrix4x4, 9));
};


/**
 * @param {?proto.Matrix4x4|undefined} value
 * @return {!proto.CustomRobot} returns this
*/
proto.CustomRobot.prototype.setRootCs = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.clearRootCs = function() {
  return this.setRootCs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CustomRobot.prototype.hasRootCs = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Matrix4x4 flange_cs = 10;
 * @return {?proto.Matrix4x4}
 */
proto.CustomRobot.prototype.getFlangeCs = function() {
  return /** @type{?proto.Matrix4x4} */ (
    jspb.Message.getWrapperField(this, proto.Matrix4x4, 10));
};


/**
 * @param {?proto.Matrix4x4|undefined} value
 * @return {!proto.CustomRobot} returns this
*/
proto.CustomRobot.prototype.setFlangeCs = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CustomRobot} returns this
 */
proto.CustomRobot.prototype.clearFlangeCs = function() {
  return this.setFlangeCs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CustomRobot.prototype.hasFlangeCs = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ExternalAxis.repeatedFields_ = [4,5,6,7,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExternalAxis.prototype.toObject = function(opt_includeInstance) {
  return proto.ExternalAxis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExternalAxis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExternalAxis.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalAxisType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    shortName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rangeMinList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    rangeMaxList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    speedList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
    orientationList: jspb.Message.toObjectList(msg.getOrientationList(),
    proto.Matrix4x4.toObject, includeInstance),
    position: (f = msg.getPosition()) && proto.CartesianPosition.toObject(includeInstance, f),
    geometryList: jspb.Message.toObjectList(msg.getGeometryList(),
    proto.PolyMesh.toObject, includeInstance),
    data: (f = msg.getData()) && proto.MetaData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExternalAxis}
 */
proto.ExternalAxis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExternalAxis;
  return proto.ExternalAxis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExternalAxis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExternalAxis}
 */
proto.ExternalAxis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ExternalAxisType} */ (reader.readEnum());
      msg.setExternalAxisType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortName(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setRangeMinList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setRangeMaxList(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setSpeedList(value);
      break;
    case 7:
      var value = new proto.Matrix4x4;
      reader.readMessage(value,proto.Matrix4x4.deserializeBinaryFromReader);
      msg.addOrientation(value);
      break;
    case 8:
      var value = new proto.CartesianPosition;
      reader.readMessage(value,proto.CartesianPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 9:
      var value = new proto.PolyMesh;
      reader.readMessage(value,proto.PolyMesh.deserializeBinaryFromReader);
      msg.addGeometry(value);
      break;
    case 10:
      var value = new proto.MetaData;
      reader.readMessage(value,proto.MetaData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExternalAxis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExternalAxis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExternalAxis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExternalAxis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalAxisType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getShortName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRangeMinList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getRangeMaxList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getSpeedList();
  if (f.length > 0) {
    writer.writePackedFloat(
      6,
      f
    );
  }
  f = message.getOrientationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.Matrix4x4.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.CartesianPosition.serializeBinaryToWriter
    );
  }
  f = message.getGeometryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.PolyMesh.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.MetaData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExternalAxisType external_axis_type = 1;
 * @return {!proto.ExternalAxisType}
 */
proto.ExternalAxis.prototype.getExternalAxisType = function() {
  return /** @type {!proto.ExternalAxisType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ExternalAxisType} value
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.setExternalAxisType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ExternalAxis.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string short_name = 3;
 * @return {string}
 */
proto.ExternalAxis.prototype.getShortName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.setShortName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated float range_min = 4;
 * @return {!Array<number>}
 */
proto.ExternalAxis.prototype.getRangeMinList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.setRangeMinList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.addRangeMin = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.clearRangeMinList = function() {
  return this.setRangeMinList([]);
};


/**
 * repeated float range_max = 5;
 * @return {!Array<number>}
 */
proto.ExternalAxis.prototype.getRangeMaxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.setRangeMaxList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.addRangeMax = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.clearRangeMaxList = function() {
  return this.setRangeMaxList([]);
};


/**
 * repeated float speed = 6;
 * @return {!Array<number>}
 */
proto.ExternalAxis.prototype.getSpeedList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.setSpeedList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.addSpeed = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.clearSpeedList = function() {
  return this.setSpeedList([]);
};


/**
 * repeated Matrix4x4 orientation = 7;
 * @return {!Array<!proto.Matrix4x4>}
 */
proto.ExternalAxis.prototype.getOrientationList = function() {
  return /** @type{!Array<!proto.Matrix4x4>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Matrix4x4, 7));
};


/**
 * @param {!Array<!proto.Matrix4x4>} value
 * @return {!proto.ExternalAxis} returns this
*/
proto.ExternalAxis.prototype.setOrientationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.Matrix4x4=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Matrix4x4}
 */
proto.ExternalAxis.prototype.addOrientation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Matrix4x4, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.clearOrientationList = function() {
  return this.setOrientationList([]);
};


/**
 * optional CartesianPosition position = 8;
 * @return {?proto.CartesianPosition}
 */
proto.ExternalAxis.prototype.getPosition = function() {
  return /** @type{?proto.CartesianPosition} */ (
    jspb.Message.getWrapperField(this, proto.CartesianPosition, 8));
};


/**
 * @param {?proto.CartesianPosition|undefined} value
 * @return {!proto.ExternalAxis} returns this
*/
proto.ExternalAxis.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExternalAxis.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated PolyMesh geometry = 9;
 * @return {!Array<!proto.PolyMesh>}
 */
proto.ExternalAxis.prototype.getGeometryList = function() {
  return /** @type{!Array<!proto.PolyMesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PolyMesh, 9));
};


/**
 * @param {!Array<!proto.PolyMesh>} value
 * @return {!proto.ExternalAxis} returns this
*/
proto.ExternalAxis.prototype.setGeometryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.PolyMesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PolyMesh}
 */
proto.ExternalAxis.prototype.addGeometry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.PolyMesh, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.clearGeometryList = function() {
  return this.setGeometryList([]);
};


/**
 * optional MetaData data = 10;
 * @return {?proto.MetaData}
 */
proto.ExternalAxis.prototype.getData = function() {
  return /** @type{?proto.MetaData} */ (
    jspb.Message.getWrapperField(this, proto.MetaData, 10));
};


/**
 * @param {?proto.MetaData|undefined} value
 * @return {!proto.ExternalAxis} returns this
*/
proto.ExternalAxis.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ExternalAxis} returns this
 */
proto.ExternalAxis.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExternalAxis.prototype.hasData = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * @enum {number}
 */
proto.ExternalAxisType = {
  LINEAR_RAIL: 0,
  LINEAR_DOUBLE: 1,
  LINEAR_TRIPLE: 2,
  ROTARY_SINGLE: 3,
  ROTARY_DOUBLE: 4,
  AGV: 5
};

/**
 * @enum {number}
 */
proto.CartesianReference = {
  ABSOLUTE: 0,
  RELATIVE: 1,
  PARENT: 2
};

/**
 * @enum {number}
 */
proto.FrameType = {
  FIXED: 0,
  EXTERNAL: 1
};

/**
 * @enum {number}
 */
proto.AxisName = {
  A1: 0,
  A2: 1,
  A3: 2,
  A4: 3,
  A5: 4,
  A6: 5,
  A7: 6,
  E1: 7,
  E2: 8,
  E3: 9,
  E4: 10
};

/**
 * @enum {number}
 */
proto.TaskType = {
  SIMULATE_TASK: 0,
  EXECUTE_TASK: 1,
  EXECUTE_ON_SIMULATION_SUCCESS_TASK: 2,
  SIMULATE_AND_EXECUTE_TASK: 3,
  CONTAINER: 4
};

/**
 * @enum {number}
 */
proto.RobotStatus = {
  IDLE: 0,
  ACTIVE: 1,
  ERROR: 2
};

/**
 * @enum {number}
 */
proto.MotionGroupType = {
  CP: 0,
  PTP: 1,
  SPLINE: 2
};

goog.object.extend(exports, proto);
